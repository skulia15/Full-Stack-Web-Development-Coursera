1
00:00:00,025 --> 00:00:05,960
最近 Node.js 吸引了很多人的眼球

2
00:00:05,960 --> 00:00:08,870
接下来让我们来看看 Node.js 到底是什么

3
00:00:08,870 --> 00:00:12,340
以及 NPM 在和 Node.js 搭配使用时

4
00:00:12,340 --> 00:00:17,040
担当的是怎样的一个角色

5
00:00:17,040 --> 00:00:18,871
什么是 Node.js ?

6
00:00:18,871 --> 00:00:23,513
Node.js 是一个 JavaScript 运行环境

7
00:00:23,513 --> 00:00:27,484
它基于 Chrome V8 JavaScript 引擎

8
00:00:27,484 --> 00:00:31,150
Chrome V8 JavaScript 引擎在一开始是

9
00:00:31,150 --> 00:00:36,590
Chrome 浏览器支持运行 JavaScript 的一个引擎

10
00:00:36,590 --> 00:00:39,950
而现在 当你把这个引擎从浏览器里分离出来

11
00:00:39,950 --> 00:00:42,130
并让它在你的机器上运行时

12
00:00:42,130 --> 00:00:47,820
你的机器就能运行 JavaScript 程序了

13
00:00:47,820 --> 00:00:50,720
这带来了许多有意思的功能

14
00:00:52,010 --> 00:00:56,910
而 Node 环境则使用了事件驱动的
非阻塞的 IO 模型

15
00:00:56,910 --> 00:00:59,430
这使它能轻量级地 有效率地处理

16
00:00:59,430 --> 00:01:03,730
主要是数据驱动的网站

17
00:01:03,730 --> 00:01:07,930
我们将在后续的课程中回过头来看这一些方面

18
00:01:07,930 --> 00:01:13,690
而现在 我们关心的主要是
Node 作为 JavaScript 运行环境时的表现

19
00:01:16,160 --> 00:01:19,790
这是一个 Node 的框架图

20
00:01:19,790 --> 00:01:23,410
在底部有我们之前提到过

21
00:01:24,630 --> 00:01:29,030
作为 Node 核心的 Google Chrome V8 引擎

22
00:01:29,030 --> 00:01:34,790
位于同一层的还有 libuv 
它允许你和更底层的计算机系统和设备

23
00:01:36,520 --> 00:01:41,840
进行一些交互

24
00:01:41,840 --> 00:01:46,810
而在其上 也就是第二层 
是完全用 C++ 写的 Node Bindings 库

25
00:01:46,810 --> 00:01:51,090
至于第一层就是 Node 核心 或说标准库 

26
00:01:51,090 --> 00:01:54,630
它是完全用 JavaScript 实现的

27
00:01:54,630 --> 00:01:56,840
而这一层也正是我们在使用 Node 运行环境时

28
00:01:56,840 --> 00:01:59,350
要应用的一层

29
00:02:00,610 --> 00:02:05,890
通常 Node 的 JavaScript 运行环境有两种用法

30
00:02:05,890 --> 00:02:13,420
其一 很多人用 JavaScript 写了一系列
有趣的 web 开发工具

31
00:02:13,420 --> 00:02:20,770
这些工具能在 Node 上运行
并适用于多种多样的 web 开发用例

32
00:02:20,770 --> 00:02:23,920
比如著名的 Bower, Grunt, Gulp 等等

33
00:02:23,920 --> 00:02:25,860
这些工具都是用 JavaScript 写的

34
00:02:25,860 --> 00:02:32,129
我们将会在后续课程中着重探索其中的几个

35
00:02:33,960 --> 00:02:38,110
其次 Node 同时也将 JavaScript 带到了服务端

36
00:02:38,110 --> 00:02:42,640
之前我在介绍 web 开发时曾提到过
传统上，开发服务器端时

37
00:02:42,640 --> 00:02:46,820
需另外使用 ruby, Python, Java ASP.Net, PHP 
等等 (与 JS) 不同的后端开发语言

38
00:02:46,820 --> 00:02:51,250
来实现服务端

39
00:02:52,850 --> 00:02:58,300
而有了 Node 之后 你就可以完全使用 JavaScript

40
00:02:58,300 --> 00:03:03,400
来实现服务端了

41
00:03:03,400 --> 00:03:05,050
这样的话 你就可以只用 JavaScript 这一门语言

42
00:03:05,050 --> 00:03:09,520
来同时实现前端和后端

43
00:03:09,520 --> 00:03:14,860
这就是 Node 在后端开发上带给你的灵活性

44
00:03:14,860 --> 00:03:19,460
我们会在这个专项课程中的另一门

45
00:03:19,460 --> 00:03:24,130
完全不同的课程中学习这部分内容

46
00:03:26,320 --> 00:03:29,010
当你听到人们讨论 Node 的时候

47
00:03:29,010 --> 00:03:32,540
你会经常听到人们谈起 Node 的包管理器
简称 NPM

48
00:03:34,330 --> 00:03:40,550
NPM 是 Node 模块 (以及包) 生态的管理器

49
00:03:40,550 --> 00:03:42,630
已经有很多人写了很多

50
00:03:43,880 --> 00:03:49,115
用于 Node 的实用类库

51
00:03:49,115 --> 00:03:55,475
你可以下载这些模块形式的包到你的系统中

52
00:03:55,475 --> 00:04:00,980
并在你自己的 Node 开发中

53
00:04:00,980 --> 00:04:05,270
灵活应用它们

54
00:04:06,348 --> 00:04:11,090
我们会在这门课程中稍微学习一点这方面的知识

55
00:04:11,090 --> 00:04:16,759
不过你将会更多的在服务端 Node 应用案例中
看到这方面的应用

56
00:04:18,840 --> 00:04:24,610
简单地说, Node 包是一些 JavaScript 文件的集合

57
00:04:24,610 --> 00:04:27,970
它们实现了一些库以及一个叫 
package.json 的文件

58
00:04:27,970 --> 00:04:33,512
这个文件如同包裹的内容说明

59
00:04:33,512 --> 00:04:36,600
我们将会在接下来的某几节课中

60
00:04:36,600 --> 00:04:40,550
看到 package.json 的一些栗子并学习
如何设置并使用它

61
00:04:41,890 --> 00:04:48,160
接下来我们将会进行一系列的练习
来熟悉 Node 的使用

62
00:04:49,280 --> 00:04:52,940
我们将会先学习如何设置好 Node 和 NPM
然后我们将通过一些简单的例子

63
00:04:52,940 --> 00:04:57,980
来更好地理解 Node 模块
【翻译 - Carefree0910 校对 - Qiansen1386】