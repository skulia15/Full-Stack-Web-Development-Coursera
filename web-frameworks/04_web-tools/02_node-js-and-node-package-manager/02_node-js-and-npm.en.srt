1
00:00:00,025 --> 00:00:05,960
Node.js has been gathering
a lot of attention lately.

2
00:00:05,960 --> 00:00:08,870
Let's try to understand what Node.js is.

3
00:00:08,870 --> 00:00:12,340
And what role does NPM play, together,

4
00:00:12,340 --> 00:00:17,040
with Node.js?

5
00:00:17,040 --> 00:00:18,871
Now what exactly is Node.js?

6
00:00:18,871 --> 00:00:23,513
Node.js is a JavaScript
runtime that is built on

7
00:00:23,513 --> 00:00:27,484
top of the Chrome V8 JavaScript Engine.

8
00:00:27,484 --> 00:00:31,150
The Chrome V8 JavaScript Engine
was built originally to a part of

9
00:00:31,150 --> 00:00:36,590
the Chrome browser and to support the
JavaScript that runs within your browser.

10
00:00:36,590 --> 00:00:39,950
Now once you separate the engine
out of the browser and

11
00:00:39,950 --> 00:00:42,130
let it run on your machine,

12
00:00:42,130 --> 00:00:47,820
you're able to support the running of
JavaScript programs on your machine.

13
00:00:47,820 --> 00:00:50,720
Now this brings a lot of
interesting capabilities.

14
00:00:52,010 --> 00:00:56,910
The node environment uses an event driven,
non-blocking,

15
00:00:56,910 --> 00:00:59,430
I/O model which makes
it very lightweight and

16
00:00:59,430 --> 00:01:03,730
efficient to handle primarily
data driven websites.

17
00:01:03,730 --> 00:01:07,930
We're gonna look at that
aspect in a later course.

18
00:01:07,930 --> 00:01:13,690
Now, in this course we will look at nodes
used primarily as a JavaScript runtime.

19
00:01:16,160 --> 00:01:19,790
This is a quick overview
of the node architecture.

20
00:01:19,790 --> 00:01:23,410
At the bottom layer of course,
as they said node runs on top of

21
00:01:24,630 --> 00:01:29,030
Google Chrome's V8 engine, so Chrome V8
engine it at the bottom together with

22
00:01:29,030 --> 00:01:34,790
libuv, which enables
interaction with the underlying

23
00:01:36,520 --> 00:01:41,840
computer system, and
the devices, and so on.

24
00:01:41,840 --> 00:01:46,810
And on top of that, we have node bindings,
which are written in C++.

25
00:01:46,810 --> 00:01:51,090
The uppermost layer is the node core,
or standard library,

26
00:01:51,090 --> 00:01:54,630
we just completely
implement it in JavaScript.

27
00:01:54,630 --> 00:01:56,840
Now this is what we make use of.

28
00:01:56,840 --> 00:01:59,350
When we use the node runtime.

29
00:02:00,610 --> 00:02:05,890
The node JavaScript runtime has
been used in two different ways.

30
00:02:05,890 --> 00:02:13,420
First, a lot of people have written a set
of interesting web development utilities.

31
00:02:13,420 --> 00:02:20,770
In JavaScript to run on node and support
various use cases for web development.

32
00:02:20,770 --> 00:02:23,920
So we have tools like Bower,
Grunt, Gulp, and so on,

33
00:02:23,920 --> 00:02:25,860
which are all written in JavaScript.

34
00:02:25,860 --> 00:02:32,129
We're gonna explore some of these in
the next few lectures in this course.

35
00:02:33,960 --> 00:02:38,110
Node also brings JavaScript
to the server side.

36
00:02:38,110 --> 00:02:42,640
Earlier when we looked at web
development we saw that we needed to use

37
00:02:42,640 --> 00:02:46,820
a completely different language of
the server side like ruby, python,

38
00:02:46,820 --> 00:02:51,250
Java ASP.NET, PHP, and so on.

39
00:02:52,850 --> 00:02:58,300
With the availability of Node,
you can start writing server-side

40
00:02:58,300 --> 00:03:03,400
implementation completely in JavaScript,
so with a single language.

41
00:03:03,400 --> 00:03:05,050
JavaScript in this case,

42
00:03:05,050 --> 00:03:09,520
you are able to target both the front
end as well as the back end.

43
00:03:09,520 --> 00:03:14,860
So that's the flexibility that node
brings you for back end development.

44
00:03:14,860 --> 00:03:19,460
We're gonna explore this part
of it in a entirely different

45
00:03:19,460 --> 00:03:24,130
course which will follow towards
the later part of this specialization.

46
00:03:26,320 --> 00:03:29,010
In the context of node you often

47
00:03:29,010 --> 00:03:32,540
hear people talk about the node
package manager or NPM.

48
00:03:34,330 --> 00:03:40,550
This is a manager that manages the
ecosystem of node modules, or packages.

49
00:03:40,550 --> 00:03:42,630
A lot of people have already written

50
00:03:43,880 --> 00:03:49,115
very useful libraries that
can be Used with node.

51
00:03:49,115 --> 00:03:55,475
These are package in the form of node
modules that you can download and

52
00:03:55,475 --> 00:04:00,980
install within your system and make
use of these libraries within your own

53
00:04:00,980 --> 00:04:05,270
node development that
you do in JavaScript.

54
00:04:06,348 --> 00:04:11,090
We are gonna explore a little
of this in this course but

55
00:04:11,090 --> 00:04:16,759
you will see a lot more of this in the
server side node application use cases.

56
00:04:18,840 --> 00:04:24,610
Now, a node package contains
the JavaScript files,

57
00:04:24,610 --> 00:04:27,970
which obviously implement the libraries,
and

58
00:04:27,970 --> 00:04:33,512
also a file called package.json,
which is like a manifest file.

59
00:04:33,512 --> 00:04:36,600
We're gonna look at an example
of package.json for

60
00:04:36,600 --> 00:04:40,550
some use cases in some
of the later lectures.

61
00:04:41,890 --> 00:04:48,160
Now we'll move on to a couple of
exercises where we learn more about node.

62
00:04:49,280 --> 00:04:52,940
We'll first look at setting up node and
NPM.

63
00:04:52,940 --> 00:04:57,980
And then we'll understand node modules
by implementing a very simple example.