现在让我们来学习一些 CSS 预处理器
相关的知识 尤其是 Less 和 Sass 的相关知识 当你进入 Bootstrap 的网站时 你可能会发现他们说 Bootstrap
是用 Less 来搭建的 他们也会提供一个 Sass 端口 然后你可能就会想 什么是 Less？ Sass 又是什么？ 这俩货在定义 Bootstrap 的 CSS 类时
起到了什么作用？ 现在就让我们学一些这方面的知识 你已经学了很多 CSS 的相关知识了 所以你应该知道 CSS 是一个绝佳的 拿来定义各种 HTML 元素属性的东西 但是当实际运用 CSS 时 你可能会发现
它有许多限制 你不能像编写典型的编程语言代码那样
去编写 CSS 代码 CSS 并不支持变量 嵌套 表达式和函数 所以如果这些功能都能加进 CSS 的话 CSS 无疑会好用得多 而且除去好用这一因素 缺少这些功能的 CSS 是很难维护的 如果你经常写代码的话 你可能就能体会到 没有变量 函数和表达式是多么蛋疼的一件事 也因此 越来越多的 CSS 的弊病都
很快地暴露了出来 这时候 CSS 预处理器就显得弥足珍贵了 如果你想让写 CSS 代码的过程更类似于
你平时写代码的过程的话 强烈建议你去学学 CSS 预处理器 现在比较流行的预处理器有三种 Less, Sass 和 Stylus 我们将会学习的是 Less 和 Sass 不过除了我们接下来要学习的内容外 CSS 预处理器还有非常多其它酷炫的功能 我会提供你一些链接 这些链接可以帮助
你进行进一步的学习 作为一个预处理器 如果我用了它来写代码的话 它要能自动帮我将其转换成有用的 CSS 代码 而为了做到这一点 我们通常会用 一些编译器或是一些专门的工具 特别地 我们将会学习一个用来编译
Less 代码的工具 Bootstrap 一开始就是用 Less 写的 而现在它也有 Sass 的端口 一个传统的 CSS 预处理器将会支持 变量, 选择器的嵌套, 混入, 函数和表达式 我们将通过一些例子来学习其中的一些细节 而在下个练习里我们将会学习
如何写 Less 代码 以及如何将其编译为相对应的
能用的 CSS 代码 我将同一个功能的 Less 实现和 Sass 实现
同时放了出来 你可以看到这两种实现非常相似 同一时间， 这两者的语法会有一些细小的差异 首先它们都能定义变量 不过在 Less 里面 变量的变量名前面
是用 @ 来修饰 而在 Sass 里面则是用 $ 来修饰 如果你想用这个变量 直接指定这个变量名 然后再用 @ 或 $ 打头即可 这取决于你用
Less 还是 Sass 在这个栗子里 我定义了一个颜色变量
和一个高度变量 你可以从图中看出 我是怎么应用它们的 在 Less 和 Sass 中 变量是有作用域的 在你定义一个变量后 只有在相对应的作用域中 你才能调用这个变量 如果你平时经常编程 你对这个概念
应该不会陌生 用预处理器的一大好处就是你可以进行嵌套 当我们写 CSS 代码时 你可能会发现你定义的
某个 CSS 类 需要基于你之前定义的某个类 举个栗子 你可能会写一个 carousel 类 然后在 carousel 类里面 你可能又定义了
一个 item 类 如果你是用 CSS 代码来写的话
你将会写一个 .carousel 和一个 .carousel .item 之类的 嵌套则允许你进行类的嵌套 意味着你定义的每一个类 都可以有父类和子类 在这个栗子里 我同时用 Less 和 Sass 写了一个嵌套 它们在定义嵌套时非常相似 你可以看到我在这写了一个 carousel 类 然后在 carousel 类里面 我直接写了一个 item 类 然后在这个 item 类里面 我还写了一个 image 类 注意 在这里这个 image 类中的这些属性 是只给 carousel item 中的 image 设置的 我们在写 CSS 类时经常碰到的另一个问题
就是重用问题 也就是说我们可能会想重复使用某些
特定的 CSS 样式 如果你直接去写 CSS 代码的话
你需要逐个地去定义 不过当你有了混入时 重用就变得非常简单了 混入是用来减少重复代码的 非常有用的一个功能 比如说在这个栗子里 你可以看到我定义了一个叫 zero-margin 的混入 它定义了 margin: 0px auto; 和其它一些属性 这些属性通过混入可以直接
应用在 CSS 类里面 比如说在 Less 里面 通过 .zero-margin 来引入 zero-margin 的话 这个 CSS 类就会拥有 zero-margin 里面
定义的所有属性了 Sass 是类似的 只不过将 .zero-margin 换成
@include zero-margin 而已 你可以将混入看成是一个父类 然后将引用混入的过程看成是继承 使用混入的优势是 混入可以同时定义多个 CSS 属性 而变量一次只能定义一个 更炫酷的是 混入还可以接受参数 在这个栗子里 你可以看到我在混入里面 定义了两个参数 一个是拿来定义上下的填充的 另一个则是定义左右的填充 对应的 当我使用这些混入时 就需要传进参数了 让我们来看看这个栗子吧 我们在两个类中引用了混入 你可以看到我在其中一个引用时
没有传进参数 这意味着混入将会使用默认的参数 而如果我传进了参数的话 混入就会使用我传进去的参数 50 这一个过程貌似相当复杂 不过这个过程的编译会自动帮你做好 所以你不用担心 你也可以看到 左右两种实现只有一点点
语法上的差异 其它大部分都是一样的 从这你也可以感受到 Less 和 Sass有多相似了 特别地 在 Sass 中使用混入时 你需要在混入的名字前用 @include 打头 然后再括号里传进你想传的参数 你也可以在混入中 做很多数学运算 在这个栗子里 我定义了一个叫
carousel-height 的变量 然后在下面的类中我都引用了这个变量 且在一些类中我还用这个变量
做了一些数学运算 举例来说， 我可以将代表“小”的类的高度设置为
carousel-height 的四分之一 然后将代表"大"的类的高度设置为两倍 这些同样可以定义在 Bootstrap 中 可以想象 数学运算的支持极大地提高了 你写 Less 和 Sass 代码的灵活性 除了我们讲过的这些 还有许多其它 Less 和 Sass 的很棒的功能 事实上 Stylus 也很不错 注意到我们还能用函数 这些函数允许你做数学运算 允许你操作列表和字符串 甚至允许你对颜色进行操作 几个栗子 你可以接收一个颜色
然后加深它并返回之 一个实际的案例就是当你想获得
一个组件的悬浮颜色时 你通常可以接收这个组件在
平常状态下的颜色 然后将它加深来作为有鼠标悬停在其上时
显示的颜色 这些种种写代码时的灵活性都是
预处理器带给我们的 而且 你完全可以在你的 Less 或 Sass 文件中 引入你之前写过的 Less 和 Sass 类 引入的方法非常简单 直接 @import xxx 就行了 让我们来看看 Bootstrap 是怎么用 Less 和 Sass 的 当你进入 Bootstrap 网站时 你可以找到一个 Using Less 的链接 单击它 你就可以获得 Bootstrap 在 Less 用了哪些变量 混入
等等的信息 Bootstrap 中的变量和混入是定义得
非常精细的 所以如果你想更改 Bootstrap 中的某些样式
你可以尝试 通过更改 Less 格式的 Bootstrap
来定制你自己的 Bootstrap 不过注意你的更改很可能"牵一发而动全身" 在这里 你可以看到 Bootstrap 是怎么通过变量
来定义不同的颜色的 你也可以看到它是怎么定义链接 排版等东西的 这些都是通过一个个变量来实现的 Bootstrap 同样有 Sass 版本 它们有官方的 Sass 端口提供给你 这一部分将会由一个单独的 GitHub 仓库来维护 所以只要你的项目有需求 你完全可以放心地使用 Sass 版本的 Bootstrap 在接下来一系列的课程中 我们将会学习 如何将在预处理器中编写的代码 自动编译成可用的 CSS 代码 所以 让我们进行一个练习吧 在这个练习里 我们会亲自去写一些 Less 代码 我们将会亲自写一些 Less 的变量 和一些嵌套 混入 然后我们会把我们写的 Less 代码
转换成可用的 CSS 代码 为了做到这一点 我们会利用一个工具 这个工具是可以装在你系统上的 一个 node 模块
【翻译 - Carefree0910】