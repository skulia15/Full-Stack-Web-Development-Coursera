1
00:00:00,990 --> 00:00:08,940
接下来让我们进行 Less 的练习吧

2
00:00:08,940 --> 00:00:14,170
我相信你会看着 "Exercise Less"
并在心底希冀自己的导师也能这么说

3
00:00:15,340 --> 00:00:20,190
残念的是 少年 在现实生活中
你必须要进行很多练习

4
00:00:20,190 --> 00:00:23,060
咳 玩笑到此为止
让我们正式开始练习使用

5
00:00:23,060 --> 00:00:25,088
Less 这个 CSS 的预处理器

6
00:00:27,214 --> 00:00:34,095
现在先用 Brackets 或你喜欢的文本编辑器
打开我们至今为止做的网站项目

7
00:00:34,095 --> 00:00:40,419
然后进入到 CSS 文件夹并创建
一个叫 mystyles.less 的文件

8
00:00:42,050 --> 00:00:48,860
我们将会在该文件中加进一些 Less 代码

9
00:00:49,910 --> 00:00:55,730
首先 让我定义几个变量

10
00:00:57,500 --> 00:01:00,670
你可以看到我在这定义了几个变量

11
00:01:00,670 --> 00:01:06,610
我定义了好几种颜色变量
和一个高度变量

12
00:01:06,610 --> 00:01:11,550
我将会在之后的 Less 类中应用到它们

13
00:01:13,170 --> 00:01:18,680
接下来 我加进了一个 Less 类
以展示混入的使用

14
00:01:18,680 --> 00:01:22,870
我将该 Less 类命名为了 zero-margin

15
00:01:22,870 --> 00:01:28,004
我相信你已经在之前某节课中
看到过这个类

16
00:01:28,004 --> 00:01:35,129
那么这个类将接受两个参数
pad-up-dn 和 pad-left-right

17
00:01:35,129 --> 00:01:42,950
从字面意思即可知 我将应用它们
来定义该类对应的填充样式

18
00:01:42,950 --> 00:01:46,017
我将会把这个类作为混入的素材

19
00:01:46,017 --> 00:01:48,700
来定义一些 row 相关的类

20
00:01:50,150 --> 00:01:54,811
那么于此 你能看到我定义了
好几个 row 相关的类

21
00:01:54,811 --> 00:01:59,254
我将会在我们的项目中使用它们

22
00:01:59,254 --> 00:02:03,806
你可以看到 这几个类的代码的第一行

23
00:02:03,806 --> 00:02:04,586
都是对 zero-margin 类的引用

24
00:02:04,586 --> 00:02:11,507
然后在最后这里的设置了 zero-margin 参数为
50px 和 0px 的 row-content

25
00:02:11,507 --> 00:02:16,245
和设置了参数为 20px 和 0px 的 row-footer 之后
我还定义了一个 jumbotron 类

26
00:02:16,245 --> 00:02:20,515
总之对不同的角色 我定义了
不同的填充数值

27
00:02:20,515 --> 00:02:24,435
不过我把它们的边缘数值都设置为了 0

28
00:02:24,435 --> 00:02:28,165
总之有了混入之后

29
00:02:28,165 --> 00:02:33,425
我就能重复利用代码了

30
00:02:35,280 --> 00:02:39,310
接下来我定义了一个 carousel 类
来定制我的轮播

31
00:02:39,310 --> 00:02:41,100
在该类中

32
00:02:41,100 --> 00:02:45,010
我用到了我之前定义的某些变量

33
00:02:45,010 --> 00:02:48,595
比如将背景色设为 dark-indigo 这个变量

34
00:02:48,595 --> 00:02:52,115
将其下的 item 的高度设为
carousel-height 这个变量

35
00:02:52,115 --> 00:02:56,705
然后对再其下的 img 的最小高度
也设置为了 carousel-height 这个变量

36
00:02:56,705 --> 00:03:03,557
需要注意的是 这里我用了嵌套
来同时定义了三个类

37
00:03:03,557 --> 00:03:06,307
也就是在 carousel 中嵌了 item

38
00:03:06,307 --> 00:03:08,677
在 item 中嵌了 img

39
00:03:08,677 --> 00:03:12,357
也就是说这段 Less 代码编译成
可用的 CSS 代码后

40
00:03:12,357 --> 00:03:16,527
会变成三段代码 每一段代码
定义了这三个类中的一个

41
00:03:16,527 --> 00:03:19,757
分别是 .carousel, .carousel .item
和 .carousel .item .img 类

42
00:03:21,247 --> 00:03:27,490
这个则是另一个使用嵌套的栗子

43
00:03:27,490 --> 00:03:30,920
我用其来定制我的 navbar-inverse

44
00:03:30,920 --> 00:03:35,280
你可能已经注意到 这些 Less 代码
定制出来的 CSS 类

45
00:03:35,280 --> 00:03:38,990
正是之前我们定义过的 CSS 类

46
00:03:38,990 --> 00:03:40,990
我这么做的原因

47
00:03:40,990 --> 00:03:45,850
是想让你知道 Less 和 CSS 之间的关系

48
00:03:45,850 --> 00:03:47,980
从而今后如果你想用 Less
来定制你的网页时

49
00:03:47,980 --> 00:03:51,760
只要你知道 CSS 该怎么写

50
00:03:52,850 --> 00:03:55,910
你就能更轻易地将其转换成

51
00:03:55,910 --> 00:03:59,930
相应的 Less 代码

52
00:03:59,930 --> 00:04:04,348
总之在这 我定义了一个
navbar-inverse 类

53
00:04:04,348 --> 00:04:10,570
然后在其下 我定义了一系列的类

54
00:04:10,570 --> 00:04:13,921
诸如 .navbar-nav>.active>a 和
其它的一些类

55
00:04:20,128 --> 00:04:25,262
然后最后 我定义了一些类
这些类看上去和之前的

56
00:04:25,262 --> 00:04:33,054
CSS 版本的类差不多

57
00:04:33,054 --> 00:04:35,546
事实上 由于这些类相对独立

58
00:04:35,546 --> 00:04:38,200
既无法让它们利用已有代码
也无法重复利用它们的代码

59
00:04:38,200 --> 00:04:42,505
所以像混入 嵌套这样的 Less 的特色

60
00:04:42,505 --> 00:04:47,337
在它们这里起不了作用

61
00:04:47,337 --> 00:04:49,921
当然了 我还是利用到了一些变量

62
00:04:49,921 --> 00:04:54,481
比如这个 tab-content 类中的颜色属性

63
00:04:54,481 --> 00:04:58,960
我就用到了 lt-gray 这个变量

64
00:05:01,080 --> 00:05:06,014
当你保存好这份 Less 文件

65
00:05:06,014 --> 00:05:10,963
并将其编译成可用的 CSS 文件时

66
00:05:10,963 --> 00:05:14,505
你会发现编译出来的这份 CSS 文件

67
00:05:14,505 --> 00:05:20,209
和我们之前使用的 CSS 文件

68
00:05:20,209 --> 00:05:23,120
一致无二

69
00:05:27,230 --> 00:05:32,420
那么怎么才能编译 Less 文件呢 ?

70
00:05:32,420 --> 00:05:39,030
我们需要用到一个叫 Less 的

71
00:05:39,030 --> 00:05:42,910
全局 node 模块

72
00:05:42,910 --> 00:05:47,327
为了安装这个模块

73
00:05:47,327 --> 00:05:51,936
你需要在命令行中

74
00:05:51,936 --> 00:05:56,750
运行 npm install -g less

75
00:05:56,750 --> 00:06:01,540
其中 -g 是全局模块的标识

76
00:06:01,540 --> 00:06:06,720
意味着正在安装的这个模块

77
00:06:06,720 --> 00:06:11,750
将能被任何项目引用

78
00:06:11,750 --> 00:06:15,190
而毋庸置疑的是, Less 编译器
很有可能在很多项目中有用

79
00:06:15,190 --> 00:06:19,750
所以我们要用 -g 这个标识

80
00:06:21,150 --> 00:06:26,670
如果你是在 Mac 或者 Linux 上
进行这个步骤的话

81
00:06:26,670 --> 00:06:33,220
你需要在这行命令的开头
加上 sudo 这四个字母

82
00:06:33,220 --> 00:06:36,410
如果你用的是 Windows 就不用加

83
00:06:36,410 --> 00:06:41,754
由于我现在用的是 Mac
所以我要加上 sudo

84
00:06:50,963 --> 00:06:54,983
然后如果你用的是 Mac 或是 Linux

85
00:06:54,983 --> 00:07:01,390
你还需要输一下密码

86
00:07:01,390 --> 00:07:06,510
否则你的优先级不足以让你完成
安装全局模块这个操作

87
00:07:06,510 --> 00:07:08,290
而在 Windows 上则不需要输密码

88
00:07:08,290 --> 00:07:11,390
不像 Mac 和 Linux 这么麻烦

89
00:07:11,390 --> 00:07:16,640
然后一切妥当后

90
00:07:16,640 --> 00:07:22,780
npm 会帮你部署好这个模块

91
00:07:22,780 --> 00:07:26,820
那么为什么要安装这个模块呢 ?
因为它提供了一个叫

92
00:07:26,820 --> 00:07:31,800
lessc 的编译器给我们

93
00:07:31,800 --> 00:07:35,650
这个编译器是在命令行使用的

94
00:07:35,650 --> 00:07:38,770
如果你想编译一个 Less 文件

95
00:07:38,770 --> 00:07:44,870
你只需在命令行中键入 lessc xxx 即可
其中 xxx 是你的 Less 文件名

96
00:07:44,870 --> 00:07:47,310
然后 lessc 将会自动帮你完成编译

97
00:07:47,310 --> 00:07:52,790
并生成一个相应的 CSS 文件

98
00:07:52,790 --> 00:07:53,780
让我们实际操作一下吧

99
00:07:54,840 --> 00:07:58,723
你可以看到我键入了

100
00:07:58,723 --> 00:08:04,170
lessc mystyles.less

101
00:08:04,170 --> 00:08:08,179
然后当我敲回车 它就会
生成相应的 CSS 代码

102
00:08:09,300 --> 00:08:14,960
你还可以看到在命令行这里
生成的 CSS 代码被直接打印了出来

103
00:08:14,960 --> 00:08:20,846
接下来 如果我想将这些代码

104
00:08:20,846 --> 00:08:23,320
利用 mystyle.less 的话

105
00:08:23,320 --> 00:08:29,759
我需要先将已有的 mystyle.css 文件

106
00:08:29,759 --> 00:08:35,320
移到另一个文件夹

107
00:08:35,320 --> 00:08:40,504
从而避免它被 mystyle.less 生成出来的
mystyle.css 文件覆盖

108
00:08:44,500 --> 00:08:52,087
如果你对命令行很熟悉
你可以在命令行中完成移动这个操作

109
00:08:55,879 --> 00:08:59,754
在 Mac 和 Linux 上都是可以这样做的

110
00:08:59,754 --> 00:09:06,754
如果在 Windows 上 你可以如图所示般
重命名你想移动的 mystyle.css 这个文件

111
00:09:06,754 --> 00:09:12,845
接下来 我将输入
lessc mystyle.less > mystyle.css

112
00:09:12,845 --> 00:09:18,340
这将会把生成的相应的 CSS 代码

113
00:09:18,340 --> 00:09:23,002
塞进 mystyle.css 这个文件中

114
00:09:23,002 --> 00:09:26,338
然后 系统会自动把 mystyle.css
从 lessc 编译器中移到你的硬盘上

115
00:09:29,671 --> 00:09:34,071
然后最后 你可以打开这个 CSS 文件

116
00:09:34,071 --> 00:09:40,790
并看看里面的代码长啥样

117
00:09:42,730 --> 00:09:45,560
当你打开这个 CSS 文件

118
00:09:45,560 --> 00:09:49,720
你可以看到这和我们之前用的 CSS 文件

119
00:09:51,120 --> 00:09:55,560
长得非常像

120
00:09:55,560 --> 00:10:00,430
所以到此为止
我们学习了如何利用 Less 的优点

121
00:10:00,430 --> 00:10:05,160
来定义一系列的 CSS 类

122
00:10:05,160 --> 00:10:12,790
然后我们学习了如何编译 Less 代码

123
00:10:12,790 --> 00:10:20,540
以上 我们完成了这次练习
我们不仅学习了 Less 代码怎么写

124
00:10:20,540 --> 00:10:26,640
还学习了如何去编译它
【翻译 - Carefree0910】