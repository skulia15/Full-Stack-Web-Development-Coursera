1
00:00:02,350 --> 00:00:07,090
现在让我们来学习一些 CSS 预处理器
相关的知识

2
00:00:07,090 --> 00:00:10,270
尤其是 Less 和 Sass 的相关知识

3
00:00:12,050 --> 00:00:14,430
当你进入 Bootstrap 的网站时

4
00:00:14,430 --> 00:00:19,920
你可能会发现他们说 Bootstrap
是用 Less 来搭建的

5
00:00:19,920 --> 00:00:22,510
他们也会提供一个 Sass 端口

6
00:00:22,510 --> 00:00:25,870
然后你可能就会想 什么是 Less？

7
00:00:25,870 --> 00:00:26,860
Sass 又是什么？

8
00:00:26,860 --> 00:00:33,090
这俩货在定义 Bootstrap 的 CSS 类时
起到了什么作用？

9
00:00:33,090 --> 00:00:37,050
现在就让我们学一些这方面的知识

10
00:00:39,260 --> 00:00:43,100
你已经学了很多 CSS 的相关知识了

11
00:00:43,100 --> 00:00:47,280
所以你应该知道 CSS 是一个绝佳的

12
00:00:47,280 --> 00:00:51,660
拿来定义各种 HTML 元素属性的东西

13
00:00:53,340 --> 00:00:57,500
但是当实际运用 CSS 时 你可能会发现
它有许多限制

14
00:00:57,500 --> 00:01:02,500
你不能像编写典型的编程语言代码那样
去编写 CSS 代码

15
00:01:02,500 --> 00:01:10,080
CSS 并不支持变量 嵌套 表达式和函数

16
00:01:10,080 --> 00:01:14,591
所以如果这些功能都能加进 CSS 的话

17
00:01:14,591 --> 00:01:20,950
CSS 无疑会好用得多

18
00:01:22,270 --> 00:01:26,690
而且除去好用这一因素

19
00:01:26,690 --> 00:01:29,250
缺少这些功能的 CSS 是很难维护的

20
00:01:30,870 --> 00:01:34,870
如果你经常写代码的话 你可能就能体会到

21
00:01:34,870 --> 00:01:38,430
没有变量 函数和表达式是多么蛋疼的一件事

22
00:01:38,430 --> 00:01:45,380
也因此 越来越多的 CSS 的弊病都
很快地暴露了出来

23
00:01:46,950 --> 00:01:51,180
这时候 CSS 预处理器就显得弥足珍贵了

24
00:01:51,180 --> 00:01:56,530
如果你想让写 CSS 代码的过程更类似于
你平时写代码的过程的话

25
00:01:56,530 --> 00:02:01,460
强烈建议你去学学 CSS 预处理器

26
00:02:01,460 --> 00:02:06,050
现在比较流行的预处理器有三种

27
00:02:06,050 --> 00:02:10,200
Less, Sass 和 Stylus

28
00:02:10,200 --> 00:02:15,270
我们将会学习的是 Less 和 Sass

29
00:02:15,270 --> 00:02:19,340
不过除了我们接下来要学习的内容外

30
00:02:19,340 --> 00:02:21,100
CSS 预处理器还有非常多其它酷炫的功能

31
00:02:21,100 --> 00:02:26,780
我会提供你一些链接 这些链接可以帮助
你进行进一步的学习

32
00:02:26,780 --> 00:02:31,820
作为一个预处理器 如果我用了它来写代码的话

33
00:02:31,820 --> 00:02:39,590
它要能自动帮我将其转换成有用的 CSS 代码

34
00:02:39,590 --> 00:02:44,700
而为了做到这一点 我们通常会用

35
00:02:44,700 --> 00:02:48,820
一些编译器或是一些专门的工具

36
00:02:48,820 --> 00:02:53,670
特别地 我们将会学习一个用来编译
Less 代码的工具

37
00:02:55,730 --> 00:02:59,850
Bootstrap 一开始就是用 Less 写的

38
00:02:59,850 --> 00:03:03,280
而现在它也有 Sass 的端口

39
00:03:05,530 --> 00:03:12,330
一个传统的 CSS 预处理器将会支持

40
00:03:12,330 --> 00:03:19,490
变量, 选择器的嵌套, 混入, 函数和表达式

41
00:03:19,490 --> 00:03:23,710
我们将通过一些例子来学习其中的一些细节

42
00:03:23,710 --> 00:03:29,300
而在下个练习里我们将会学习
如何写 Less 代码

43
00:03:29,300 --> 00:03:34,150
以及如何将其编译为相对应的
能用的 CSS 代码

44
00:03:36,020 --> 00:03:40,010
我将同一个功能的 Less 实现和 Sass 实现
同时放了出来

45
00:03:40,010 --> 00:03:44,650
你可以看到这两种实现非常相似

46
00:03:44,650 --> 00:03:45,940
同一时间，

47
00:03:45,940 --> 00:03:51,462
这两者的语法会有一些细小的差异

48
00:03:54,004 --> 00:03:58,100
首先它们都能定义变量

49
00:03:58,100 --> 00:04:02,480
不过在 Less 里面 变量的变量名前面
是用 @ 来修饰

50
00:04:03,830 --> 00:04:09,060
而在 Sass 里面则是用 $ 来修饰

51
00:04:09,060 --> 00:04:14,760
如果你想用这个变量 直接指定这个变量名

52
00:04:14,760 --> 00:04:20,430
然后再用 @ 或 $ 打头即可 这取决于你用
Less 还是 Sass

53
00:04:20,430 --> 00:04:26,170
在这个栗子里 我定义了一个颜色变量
和一个高度变量

54
00:04:26,170 --> 00:04:32,200
你可以从图中看出

55
00:04:32,200 --> 00:04:36,850
我是怎么应用它们的

56
00:04:37,950 --> 00:04:42,520
在 Less 和 Sass 中 变量是有作用域的

57
00:04:42,520 --> 00:04:45,840
在你定义一个变量后

58
00:04:45,840 --> 00:04:51,500
只有在相对应的作用域中 你才能调用这个变量

59
00:04:51,500 --> 00:04:54,870
如果你平时经常编程 你对这个概念
应该不会陌生

60
00:04:57,280 --> 00:05:01,280
用预处理器的一大好处就是你可以进行嵌套

61
00:05:02,670 --> 00:05:07,240
当我们写 CSS 代码时 你可能会发现你定义的
某个 CSS 类

62
00:05:07,240 --> 00:05:12,100
需要基于你之前定义的某个类

63
00:05:12,100 --> 00:05:16,110
举个栗子 你可能会写一个 carousel 类

64
00:05:16,110 --> 00:05:18,340
然后在 carousel 类里面 你可能又定义了
一个 item 类

65
00:05:18,340 --> 00:05:22,958
如果你是用 CSS 代码来写的话
你将会写一个 .carousel 

66
00:05:22,958 --> 00:05:27,092
和一个 .carousel .item 之类的

67
00:05:27,092 --> 00:05:30,560
嵌套则允许你进行类的嵌套

68
00:05:30,560 --> 00:05:32,920
意味着你定义的每一个类

69
00:05:32,920 --> 00:05:37,480
都可以有父类和子类

70
00:05:37,480 --> 00:05:42,190
在这个栗子里 我同时用 Less 和 Sass 

71
00:05:42,190 --> 00:05:46,130
写了一个嵌套

72
00:05:46,130 --> 00:05:50,420
它们在定义嵌套时非常相似

73
00:05:50,420 --> 00:05:52,760
你可以看到我在这写了一个 carousel 类

74
00:05:52,760 --> 00:05:55,126
然后在 carousel 类里面 我直接写了一个 item 类

75
00:05:55,126 --> 00:05:57,837
然后在这个 item 类里面 我还写了一个 image 类

76
00:05:57,837 --> 00:06:03,898
注意 在这里这个 image 类中的这些属性

77
00:06:03,898 --> 00:06:09,421
是只给 carousel item 中的 image 设置的

78
00:06:09,421 --> 00:06:14,505
我们在写 CSS 类时经常碰到的另一个问题
就是重用问题

79
00:06:14,505 --> 00:06:19,605
也就是说我们可能会想重复使用某些
特定的 CSS 样式

80
00:06:19,605 --> 00:06:24,290
如果你直接去写 CSS 代码的话
你需要逐个地去定义

81
00:06:24,290 --> 00:06:29,570
不过当你有了混入时 重用就变得非常简单了

82
00:06:29,570 --> 00:06:34,440
混入是用来减少重复代码的

83
00:06:34,440 --> 00:06:38,330
非常有用的一个功能

84
00:06:38,330 --> 00:06:39,130
比如说在这个栗子里

85
00:06:39,130 --> 00:06:43,370
你可以看到我定义了一个叫 zero-margin 的混入

86
00:06:43,370 --> 00:06:48,650
它定义了 margin: 0px auto; 和其它一些属性

87
00:06:48,650 --> 00:06:54,880
这些属性通过混入可以直接
应用在 CSS 类里面

88
00:06:54,880 --> 00:06:59,410
比如说在 Less 里面

89
00:06:59,410 --> 00:07:06,740
通过 .zero-margin 来引入 zero-margin 的话

90
00:07:07,750 --> 00:07:09,380
这个 CSS 类就会拥有 zero-margin 里面
定义的所有属性了

91
00:07:09,380 --> 00:07:16,254
Sass 是类似的 只不过将 .zero-margin 换成
@include zero-margin 而已

92
00:07:16,254 --> 00:07:21,942
你可以将混入看成是一个父类

93
00:07:21,942 --> 00:07:28,753
然后将引用混入的过程看成是继承

94
00:07:28,753 --> 00:07:31,581
使用混入的优势是

95
00:07:31,581 --> 00:07:35,879
混入可以同时定义多个 CSS 属性

96
00:07:35,879 --> 00:07:40,750
而变量一次只能定义一个

97
00:07:42,510 --> 00:07:45,837
更炫酷的是 混入还可以接受参数

98
00:07:45,837 --> 00:07:50,291
在这个栗子里 你可以看到我在混入里面

99
00:07:50,291 --> 00:07:52,129
定义了两个参数

100
00:07:52,129 --> 00:07:56,329
一个是拿来定义上下的填充的

101
00:07:56,329 --> 00:08:01,560
另一个则是定义左右的填充

102
00:08:01,560 --> 00:08:06,940
对应的 当我使用这些混入时

103
00:08:06,940 --> 00:08:10,760
就需要传进参数了

104
00:08:10,760 --> 00:08:15,872
让我们来看看这个栗子吧

105
00:08:15,872 --> 00:08:21,440
我们在两个类中引用了混入

106
00:08:21,440 --> 00:08:26,360
你可以看到我在其中一个引用时
没有传进参数

107
00:08:26,360 --> 00:08:30,503
这意味着混入将会使用默认的参数

108
00:08:30,503 --> 00:08:35,129
而如果我传进了参数的话

109
00:08:35,129 --> 00:08:38,737
混入就会使用我传进去的参数 50

110
00:08:38,737 --> 00:08:41,450
这一个过程貌似相当复杂

111
00:08:41,450 --> 00:08:46,210
不过这个过程的编译会自动帮你做好

112
00:08:46,210 --> 00:08:49,640
所以你不用担心

113
00:08:49,640 --> 00:08:55,130
你也可以看到 左右两种实现只有一点点
语法上的差异

114
00:08:55,130 --> 00:08:58,754
其它大部分都是一样的

115
00:08:58,754 --> 00:09:02,020
从这你也可以感受到 Less 和 Sass有多相似了

116
00:09:03,860 --> 00:09:06,640
特别地 在 Sass 中使用混入时

117
00:09:06,640 --> 00:09:11,840
你需要在混入的名字前用 @include 打头

118
00:09:11,840 --> 00:09:17,400
然后再括号里传进你想传的参数

119
00:09:17,400 --> 00:09:22,790
你也可以在混入中

120
00:09:22,790 --> 00:09:25,240
做很多数学运算

121
00:09:25,240 --> 00:09:30,530
在这个栗子里 我定义了一个叫
carousel-height 的变量

122
00:09:30,530 --> 00:09:35,150
然后在下面的类中我都引用了这个变量

123
00:09:35,150 --> 00:09:38,629
且在一些类中我还用这个变量
做了一些数学运算

124
00:09:38,629 --> 00:09:39,959
举例来说，

125
00:09:39,959 --> 00:09:45,379
我可以将代表“小”的类的高度设置为
carousel-height 的四分之一

126
00:09:45,379 --> 00:09:50,890
然后将代表"大"的类的高度设置为两倍

127
00:09:50,890 --> 00:09:54,875
这些同样可以定义在 Bootstrap 中

128
00:09:54,875 --> 00:09:58,885
可以想象 数学运算的支持极大地提高了

129
00:09:58,885 --> 00:10:03,105
你写 Less 和 Sass 代码的灵活性

130
00:10:04,465 --> 00:10:07,785
除了我们讲过的这些 还有许多其它

131
00:10:10,160 --> 00:10:11,590
Less 和 Sass 的很棒的功能

132
00:10:11,590 --> 00:10:13,990
事实上 Stylus 也很不错

133
00:10:13,990 --> 00:10:15,110
注意到我们还能用函数

134
00:10:15,110 --> 00:10:18,450
这些函数允许你做数学运算

135
00:10:18,450 --> 00:10:19,810
允许你操作列表和字符串

136
00:10:19,810 --> 00:10:21,550
甚至允许你对颜色进行操作

137
00:10:21,550 --> 00:10:26,430
几个栗子 你可以接收一个颜色
然后加深它并返回之

138
00:10:26,430 --> 00:10:30,230
一个实际的案例就是当你想获得
一个组件的悬浮颜色时

139
00:10:30,230 --> 00:10:34,820
你通常可以接收这个组件在
平常状态下的颜色

140
00:10:34,820 --> 00:10:39,930
然后将它加深来作为有鼠标悬停在其上时
显示的颜色

141
00:10:41,060 --> 00:10:48,010
这些种种写代码时的灵活性都是
预处理器带给我们的

142
00:10:48,010 --> 00:10:52,950
而且 你完全可以在你的 Less 或 Sass 文件中

143
00:10:54,270 --> 00:10:58,630
引入你之前写过的 Less 和 Sass 类

144
00:10:58,630 --> 00:11:04,030
引入的方法非常简单

145
00:11:04,030 --> 00:11:10,800
直接 @import xxx 就行了

146
00:11:10,800 --> 00:11:16,080
让我们来看看 Bootstrap 是怎么用

147
00:11:16,080 --> 00:11:19,630
Less 和 Sass 的

148
00:11:21,670 --> 00:11:25,620
当你进入 Bootstrap 网站时 你可以找到一个

149
00:11:25,620 --> 00:11:32,440
Using Less 的链接 单击它 你就可以获得

150
00:11:32,440 --> 00:11:39,270
Bootstrap 在 Less 用了哪些变量 混入
等等的信息

151
00:11:39,270 --> 00:11:46,340
Bootstrap 中的变量和混入是定义得
非常精细的

152
00:11:46,340 --> 00:11:52,200
所以如果你想更改 Bootstrap 中的某些样式
你可以尝试

153
00:11:52,200 --> 00:11:58,090
通过更改 Less 格式的 Bootstrap
来定制你自己的 Bootstrap

154
00:11:58,090 --> 00:12:02,540
不过注意你的更改很可能"牵一发而动全身"

155
00:12:02,540 --> 00:12:07,698
在这里 你可以看到 Bootstrap 是怎么通过变量
来定义不同的颜色的

156
00:12:07,698 --> 00:12:15,300
你也可以看到它是怎么定义链接 排版等东西的

157
00:12:15,300 --> 00:12:18,462
这些都是通过一个个变量来实现的

158
00:12:22,171 --> 00:12:26,220
Bootstrap 同样有 Sass 版本

159
00:12:26,220 --> 00:12:29,660
它们有官方的 Sass 端口提供给你

160
00:12:29,660 --> 00:12:33,660
这一部分将会由一个单独的 GitHub 仓库来维护

161
00:12:33,660 --> 00:12:36,400
所以只要你的项目有需求

162
00:12:36,400 --> 00:12:40,050
你完全可以放心地使用 Sass 版本的 Bootstrap

163
00:12:41,380 --> 00:12:47,890
在接下来一系列的课程中 我们将会学习

164
00:12:47,890 --> 00:12:53,320
如何将在预处理器中编写的代码

165
00:12:53,320 --> 00:12:57,730
自动编译成可用的 CSS 代码

166
00:12:59,050 --> 00:13:01,890
所以 让我们进行一个练习吧

167
00:13:03,210 --> 00:13:07,820
在这个练习里 我们会亲自去写一些 Less 代码

168
00:13:07,820 --> 00:13:11,980
我们将会亲自写一些 Less 的变量

169
00:13:13,820 --> 00:13:17,960
和一些嵌套 混入

170
00:13:17,960 --> 00:13:23,770
然后我们会把我们写的 Less 代码
转换成可用的 CSS 代码

171
00:13:25,710 --> 00:13:29,961
为了做到这一点 我们会利用一个工具

172
00:13:29,961 --> 00:13:33,558
这个工具是可以装在你系统上的

173
00:13:33,558 --> 00:13:38,900
一个 node 模块
【翻译 - Carefree0910】