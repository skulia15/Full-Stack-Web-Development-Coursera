Let's move on to our next exercise where
we will explore the Less language. I know you are looking at that and saying
I wish my doctor would say that to me. Tough luck, my friends, in real life,
you have to exercise most. But let's talk about exercise Less. Now, the pre-processors. Now open your project in brackets or
the text editor of your choice, and then go to the CSS folder and
create a file named mystyles.less. After that,
we'll add some Less code into this file. First, let me define some variables
that we're gonna use in the coat. You can see that now I have
added a few variables here. I have defined several colors there and
then also a height variable there. I'm gonna make use of these in
defining my Less classes later. Next, I add in a Less class,
which I am going to use as a mixin. And I'm naming this Less
class as zero-margin. You have seen this example already
in the lecture previously. So for this I have given two parameters,
pad-up-dn and pad-left-right. And I'm using them to define
the padding for this class here. I'm gonna make use of
this class as a mixin for defining several of the role classes. Next, using the mixin,
I am defining several of the row classes that I'm
using in my project. So here you can see that I am defining
a row header class with zero margin asterisk. When I have the final row content class
with zero margin with parameters 50px, 0px and then row-footer and the jumbotron. So for each of these,
the padding values are different, but the margin value is still 0px auto. So I am able to make use
of the mixin class, and then define these classes using that
other class that we have defined earlier. Next I define a carousel class. In the carousel class, notice the use of the variables
that we have defined already. So for the background I'm
setting it as dark-indigo. For item, I am setting
the height as carousel-height. And then the image also I am setting
the height as carousel-height. Note also how I am using nesting in
order to define these three classes. So the item class is inside
the carousel class, and the image class is inside the item class. So when it is combined we're going
to have three different classes. The dark carousel class,
the dark carousel.item, and then the dark carousel.item and
image classes. Here is yet another nesting of classes. This is what I use for the navbar inverse. Now, you're beginning to realize
that I am defining the Less class corresponding to the CSS class
that we have already constructed. Now the reason for this, is to see how from a Less
class you can go to a CSS class. So it is more easier for you to understand once you know
what the CSS class looks like. So that in the future if
you want to use Less, you will easily know how to make
use of it from this experience. So here, I am defining
the .navbar-inverse class, and inside there I am listing other classes
like the .navbar-nav>.active>a and other classes you can
see me defining here. Finally, I add in those CSS classes for which I could not use the Less
features into a large extent. So these are standard CSS classes. They have nothing in common
with the remaining classes. So I am not able to use either mixins, or to use their nesting for
these CSS classes. I'm still using the variables
that I have defined earlier. So you can see that I am using
some of the color variables that I have defined earlier
to define these classes. Once you complete this,
you are now going to save this Less file, and then compile this Less file
into the corresponding CSS file. Now once we compile this Less file
into the corresponding CSS file. You will notice that the CSS file is
the same as the CSS file that we had, had constructed for this project. How do we compile the Less file
into the corresponding CSS file? Now, this is where I'm going to make
use of a node module called Less. We are going to install this
node module as a global module. To do that, on your command prompt you're going to type npm install minus g and Less. The minus g flag is to indicate,
to any member, that, this module should be
installed as a global module to be available for
use in any project that we create. Now, of course the Less compiler
we will be using in many projects. So that's why I'm installing
this as a global MPM module. Now if you are doing this on a Mac or on a Linux, you may wish to proceed
this with the sudo command, S-U-D-O. On a Windows machine, you don't need that. But since I am running this on a Mac, I'm
gonna proceed thus with a pseudo-command. And then when you hit the return,
on a Mac or Linux it expects you to type in
your password to let you install. So this is giving admin privileges so that
the package can be installed correctly. On a Windows machine,
this is not required. You just type npm install minus g Less. And then, npm will go and
fetch the Less module from the global repository
of the npm modules. Now, this installation
of the Less module will make available to us
a compiler called lessc. This compiler will be available
to us on the command line. So if you want to compile a Less file, then you would just type Less c space and
the name of the Less file. And then this will
automatically compile and then output that corresponding CSS file. Let's see that in action. At the prompt I type in lessc mystyles.less and when I hit the return it is going to
generate the corresponding CSS file. Now, you can see that the CSS file has
been printed out on the console directly. Now, I wanna capture this
inside a CSS file here. So to do that. First, I'm going to move my existing
mystyles.css file into another file so that I will save my existing
mystyles.css file before overwriting this with the compile file that
is produced by Less c compiler. If you know how to use the command line,
you can simply say move mystyles.css. On a Mac or Linux, you can do this. Now on Windows, you can use the rename
command on the command line. Next, I'm going to type in
lessc mystyles.less, and then pipe this value
into mystyles.css file. And then,
this will save the output from the Less c compiler into the CSS file, here. Now, at the end of this,
you can open the CSS file and see the compiled corresponding CSS file
for the Less file that we just created. Having a look at the CSS file
that has been generated for us we will see that this CSS
file is pretty much similar to the CSS file we had
constructed earlier. So now you see the advantage
of using Less to define your CSS classes
using the Less syntax. And then automatically generating the CSS
classes by compiling the Less file. This completes this exercise, where
we learned how to write Less code and then automatically generating the CSS from
the Less code using the CSS compiler.