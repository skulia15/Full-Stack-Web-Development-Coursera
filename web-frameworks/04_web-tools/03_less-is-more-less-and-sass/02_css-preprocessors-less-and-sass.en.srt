1
00:00:02,350 --> 00:00:07,090
Let us now learn a little
bit about CSS preprocessors,

2
00:00:07,090 --> 00:00:10,270
in particular about Less and Sass.

3
00:00:12,050 --> 00:00:14,430
When you go to the Bootstrap website,

4
00:00:14,430 --> 00:00:19,920
you will notice that they mention
that Bootstrap is built using Less.

5
00:00:19,920 --> 00:00:22,510
And they also have a Sass port.

6
00:00:22,510 --> 00:00:25,870
And, at that point,
you must be wondering, what is this Less?

7
00:00:25,870 --> 00:00:26,860
What is Sass?

8
00:00:26,860 --> 00:00:33,090
And how do they play a role in
defining the bootstraps CSS classes?

9
00:00:33,090 --> 00:00:37,050
Let's learn a little bit about
these CSS preprocessors, now.

10
00:00:39,260 --> 00:00:43,100
You have learned a lot about
CSS in the previous course.

11
00:00:43,100 --> 00:00:47,280
Now, CSS is wonderful for styling and

12
00:00:47,280 --> 00:00:51,660
defining various properties of HTML LMX.

13
00:00:53,340 --> 00:00:57,500
But when you look at CSS,
CSS is rather limited

14
00:00:57,500 --> 00:01:02,500
when it comes to being like
a typical programming language.

15
00:01:02,500 --> 00:01:10,080
CSS doesn't support things like variables,
nesting, expressions, or even functions.

16
00:01:10,080 --> 00:01:14,591
Now, adding all these
things in place would

17
00:01:14,591 --> 00:01:20,950
definitely benefit people
who write CSS code.

18
00:01:22,270 --> 00:01:26,690
And also, without the availability
of these features,

19
00:01:26,690 --> 00:01:29,250
the maintainability of CSS suffers a lot.

20
00:01:30,870 --> 00:01:34,870
For people who are very well used
to programming, you can't live

21
00:01:34,870 --> 00:01:38,430
without things like variables,
functions, expressions and so on.

22
00:01:38,430 --> 00:01:45,380
And that is where the downside of
CSS begins to show up very quickly.

23
00:01:46,950 --> 00:01:51,180
This is where CSS Preprocessors
come to your rescue.

24
00:01:51,180 --> 00:01:56,530
If you would like to write CSS more in
the programming style that you're used to

25
00:01:56,530 --> 00:02:01,460
then go no further than looking
at the CSS preprocessors.

26
00:02:01,460 --> 00:02:06,050
There are three popular CSS
preprocessors that are out there.

27
00:02:06,050 --> 00:02:10,200
Less, Sass, and Stylus.

28
00:02:10,200 --> 00:02:15,270
We're gonna examine Less and
Sass in some detail in this lecture.

29
00:02:15,270 --> 00:02:19,340
But there is a lot more to these
preprocessors than what I can explain

30
00:02:19,340 --> 00:02:21,100
in a short duration.

31
00:02:21,100 --> 00:02:26,780
I will give you links to go and
explore these preprocessors further.

32
00:02:26,780 --> 00:02:31,820
Now, when you write code using one of
these preprocessors the expectation

33
00:02:31,820 --> 00:02:39,590
is that they will be automatically
transformed into the equivalent CSS code.

34
00:02:39,590 --> 00:02:44,700
Now this is where either compilers or

35
00:02:44,700 --> 00:02:48,820
transformation tools that are available,
come to your rescue.

36
00:02:48,820 --> 00:02:53,670
In particular, we'll examine one
such tool for compiling Less code.

37
00:02:55,730 --> 00:02:59,850
Bootstrap itself was
originally designed in Less.

38
00:02:59,850 --> 00:03:03,280
Now they do have a Sass port available.

39
00:03:05,530 --> 00:03:12,330
The typical CSS preprocessor features
that are supported include variables,

40
00:03:12,330 --> 00:03:19,490
nesting of selectors, then mixins,
and functions and expressions.

41
00:03:19,490 --> 00:03:23,710
We'll examine some of these in
more detail through some examples.

42
00:03:23,710 --> 00:03:29,300
And in the exercise we'll see
how we can write Less code,

43
00:03:29,300 --> 00:03:34,150
and automatically compile it
into the corresponding CSS.

44
00:03:36,020 --> 00:03:40,010
I am presenting these features for
both Less and

45
00:03:40,010 --> 00:03:44,650
Sass side by side, so that you can
see the similarities between the two.

46
00:03:44,650 --> 00:03:45,940
At the same time,

47
00:03:45,940 --> 00:03:51,462
minor differences in the syntax between
the two different preprocessors.

48
00:03:54,004 --> 00:03:58,100
Variables can be defined both in Less and
Sass.

49
00:03:58,100 --> 00:04:02,480
In Less, you usually precede
the variable name with an @ sign

50
00:04:03,830 --> 00:04:09,060
In Sass,
you precede the variable label with a $.

51
00:04:09,060 --> 00:04:14,760
Within the code, you can use the variables
just by specifying the name,

52
00:04:14,760 --> 00:04:20,430
including the @, in case of Less,
or including the $ in case of Sass.

53
00:04:20,430 --> 00:04:26,170
So in this example you can see that I have
defined a color and a height variable.

54
00:04:26,170 --> 00:04:32,200
And then I am using them inside my CSS
classes by specifying for example,

55
00:04:32,200 --> 00:04:36,850
the background with the color variable and
a height with the height variable.

56
00:04:37,950 --> 00:04:42,520
Variables also have scopes
both in Less and Sass.

57
00:04:42,520 --> 00:04:45,840
So if you define a variable
inside the scope,

58
00:04:45,840 --> 00:04:51,500
then the applicability of the variable
is limited to that scope.

59
00:04:51,500 --> 00:04:54,870
So if you are used to programming
you understand scopes very well.

60
00:04:57,280 --> 00:05:01,280
The advantage of using
the preprocessors is nesting.

61
00:05:02,670 --> 00:05:07,240
When we write CSS code,
you realize that you might be having

62
00:05:07,240 --> 00:05:12,100
certain classes that
are dependent upon other classes.

63
00:05:12,100 --> 00:05:16,110
So for example, you might have a carousel
class and then inside a carousel class,

64
00:05:16,110 --> 00:05:18,340
you might have an item class.

65
00:05:18,340 --> 00:05:22,958
Now when you write that CSS code,
you will write .carousal and

66
00:05:22,958 --> 00:05:27,092
then you will have another one for
.carousel dot item, and so on.

67
00:05:27,092 --> 00:05:30,560
Nesting allows you to nest the classes.

68
00:05:30,560 --> 00:05:32,920
So that you have a parent class and

69
00:05:32,920 --> 00:05:37,480
then the subclasses going
inside that parent classes.

70
00:05:37,480 --> 00:05:42,190
In this this example I have
shown you both Less and

71
00:05:42,190 --> 00:05:46,130
Sass's way of defining nesting.

72
00:05:46,130 --> 00:05:50,420
They pretty much are similar in
nature when they define nesting.

73
00:05:50,420 --> 00:05:52,760
So here, I am having a carousel class.

74
00:05:52,760 --> 00:05:55,126
And inside the carousel class,
I have an item class.

75
00:05:55,126 --> 00:05:57,837
And inside that height class,
I have an image class.

76
00:05:57,837 --> 00:06:03,898
So the properties that I defined
to the image class are applicable

77
00:06:03,898 --> 00:06:09,421
only to the images that are inside
a carousel item element.

78
00:06:09,421 --> 00:06:14,505
Very often, you might have certain CSS
classes, and then you might define other

79
00:06:14,505 --> 00:06:19,605
CSS classes that share similar properties
with the previous CSS classes.

80
00:06:19,605 --> 00:06:24,290
Now, if you go with standard CSS,
you will have to define them separately.

81
00:06:24,290 --> 00:06:29,570
With mixins, what happens is that
if you have a group of properties,

82
00:06:29,570 --> 00:06:34,440
CSS properties that you want
to apply to several classes,

83
00:06:34,440 --> 00:06:38,330
then you can define a mixin.

84
00:06:38,330 --> 00:06:39,130
Like, for example,

85
00:06:39,130 --> 00:06:43,370
in this example you can see that I have
defined a mixin called the zero margin,

86
00:06:43,370 --> 00:06:48,650
which contains margins as zero pixels,
and then some other properties.

87
00:06:48,650 --> 00:06:54,880
Summed up together,
they can be used inside other CSS classes.

88
00:06:54,880 --> 00:06:59,410
So they're in Less, for example, if I
define the zero margin I can use that zero

89
00:06:59,410 --> 00:07:06,740
margin inside another CSS class by
including the name as shown here.

90
00:07:07,750 --> 00:07:09,380
Same thing with Sass.

91
00:07:09,380 --> 00:07:16,254
In Sass, when you define a mixin, you
precede the name of the mixin with @mixin.

92
00:07:16,254 --> 00:07:21,942
And when you use a mixin
inside in another class,

93
00:07:21,942 --> 00:07:28,753
you will see @ include and
then specify name of the mixin.

94
00:07:28,753 --> 00:07:31,581
The advantage of using mixin's is,

95
00:07:31,581 --> 00:07:35,879
mixin's can hold multiple
CSS definitions together.

96
00:07:35,879 --> 00:07:40,750
Unlike variables, which are inapplicable
to a single CSS definition.

97
00:07:42,510 --> 00:07:45,837
Mixins can also take parameter values.

98
00:07:45,837 --> 00:07:50,291
So in this example, both in Less and
Sass, you can see that for my mixin,

99
00:07:50,291 --> 00:07:52,129
I have two parameter values.

100
00:07:52,129 --> 00:07:56,329
The padding value for
the up and down padding, and

101
00:07:56,329 --> 00:08:01,560
another padding value for
left and right padding.

102
00:08:01,560 --> 00:08:06,940
So, when I use that class
inside other classes,

103
00:08:06,940 --> 00:08:10,760
I can specify the parameters for
the mixin.

104
00:08:10,760 --> 00:08:15,872
So, in Less, for example,
I am using the zero margin mixin that

105
00:08:15,872 --> 00:08:21,440
I've defined, class that I've
defined with two parameters.

106
00:08:21,440 --> 00:08:26,360
And then I can use that zero margin class
inside, for example, the row header class.

107
00:08:26,360 --> 00:08:30,503
If I don't give any parameters the default
values specified will be used.

108
00:08:30,503 --> 00:08:35,129
Instead, if I give specific parameter
values, as you see for the row content.

109
00:08:35,129 --> 00:08:38,737
I specify the up and
down padding as 50 pixels, and

110
00:08:38,737 --> 00:08:41,450
left and right padding as zero pixels.

111
00:08:41,450 --> 00:08:46,210
Then automatically this will be
compiled into the appropriate

112
00:08:46,210 --> 00:08:49,640
CSS class with the light
padded values defined.

113
00:08:49,640 --> 00:08:55,130
Sass has a slightly different syntax for
defining this.

114
00:08:55,130 --> 00:08:58,754
So again, it's basically the same way.

115
00:08:58,754 --> 00:09:02,020
So you can see the similarity
between Less and Sass here too.

116
00:09:03,860 --> 00:09:06,640
In here, when you use the mixin,

117
00:09:06,640 --> 00:09:11,840
as you see you are going to precede
the mixin name with the @ include.

118
00:09:11,840 --> 00:09:17,400
And then in brackets,
you specify the parameter values.

119
00:09:17,400 --> 00:09:22,790
You can also do a lot of mathematical
operations on the values or

120
00:09:22,790 --> 00:09:25,240
variables that you use inside Mixins.

121
00:09:25,240 --> 00:09:30,530
So here, for example,
I defined a variable as carousel height.

122
00:09:30,530 --> 00:09:35,150
In some of the classes I am using
the carousel height, as are these.

123
00:09:35,150 --> 00:09:38,629
In other classes maybe I may want
to do a mathematical operation.

124
00:09:38,629 --> 00:09:39,959
So for example,

125
00:09:39,959 --> 00:09:45,379
I can define a smaller class with
one quarter of the parameter size.

126
00:09:45,379 --> 00:09:50,890
A larger class would double the parameter,
the variable value, and so on.

127
00:09:50,890 --> 00:09:54,875
So, those can also be
defined in Bootstrap.

128
00:09:54,875 --> 00:09:58,885
So mathematical operations
give you a lot of flexibility

129
00:09:58,885 --> 00:10:03,105
in the way you write the Less or
the Sass code.

130
00:10:04,465 --> 00:10:07,785
Besides these, there are many other
features that are supported by

131
00:10:10,160 --> 00:10:11,590
both Less and Sass.

132
00:10:11,590 --> 00:10:13,990
And even stylus for that matter.

133
00:10:13,990 --> 00:10:15,110
You have functions.

134
00:10:15,110 --> 00:10:18,450
So these functions allow you to
do mathematical operations, list,

135
00:10:18,450 --> 00:10:19,810
string operations.

136
00:10:19,810 --> 00:10:21,550
Even color operations.

137
00:10:21,550 --> 00:10:26,430
So, for example, you can take a color
value and darken the color value.

138
00:10:26,430 --> 00:10:30,230
For example, if you're defining
a value for a hover color.

139
00:10:30,230 --> 00:10:34,820
You can take the standard color and
then automatically process it and

140
00:10:34,820 --> 00:10:39,930
define a darker color to be applied
when you are hovering over that element.

141
00:10:41,060 --> 00:10:48,010
All this are flexibility that
pre-processing language bring for us.

142
00:10:48,010 --> 00:10:52,950
You can also import existing Less

143
00:10:54,270 --> 00:10:58,630
are Sass classes into other Less and
Sass classes.

144
00:10:58,630 --> 00:11:04,030
Of course, Less classes can be
imported into other Less files,

145
00:11:04,030 --> 00:11:10,800
and Sass files can be imported into
other Sass files correspondingly.

146
00:11:10,800 --> 00:11:16,080
Let's pay a quick visit to
the Bootstrap site to see how Less and

147
00:11:16,080 --> 00:11:19,630
Sass are actually used within Bootstrap.

148
00:11:21,670 --> 00:11:25,620
If you go to the Bootstrap site,
under CSS.

149
00:11:25,620 --> 00:11:32,440
You can click on this
link called Using Less.

150
00:11:32,440 --> 00:11:39,270
This is where the detailed
description of the less values and

151
00:11:39,270 --> 00:11:46,340
variables and mixins that are used in
Bootstrap are defined in great detail.

152
00:11:46,340 --> 00:11:52,200
You can actually get hold of
Bootstrap in less format and

153
00:11:52,200 --> 00:11:58,090
then modify things and compile your own
version of Bootstrap if you prefer to.

154
00:11:58,090 --> 00:12:02,540
So, all these are available for
you to define.

155
00:12:02,540 --> 00:12:07,698
So you can see how bootstrap is
defining the different color values

156
00:12:07,698 --> 00:12:15,300
using bootstrap variables, and
links, and typography and so on.

157
00:12:15,300 --> 00:12:18,462
These are all specified as
variables inside Bootstrap.

158
00:12:22,171 --> 00:12:26,220
Similarly, Bootstrap
also has a Sass version.

159
00:12:26,220 --> 00:12:29,660
So they have an official
Sass port now available for

160
00:12:29,660 --> 00:12:33,660
you, which is maintained as
a separate GitHub repository.

161
00:12:33,660 --> 00:12:36,400
So you can get the Sass
version of Bootstrap

162
00:12:36,400 --> 00:12:40,050
if that is what you are going
to use within your project.

163
00:12:41,380 --> 00:12:47,890
In the next set of courses we're
going to explore more on taking

164
00:12:47,890 --> 00:12:53,320
Bootstrap or other CSS files in

165
00:12:53,320 --> 00:12:57,730
the pre-processor format and
automatically generating the CSS code.

166
00:12:59,050 --> 00:13:01,890
Now, we will move on to the exercise.

167
00:13:03,210 --> 00:13:07,820
The next exercise,
we will explore the use of Less.

168
00:13:07,820 --> 00:13:11,980
So we will see how we can define the Less

169
00:13:13,820 --> 00:13:17,960
variables and mixins and nesting, and

170
00:13:17,960 --> 00:13:23,770
then construct a CSS file
by compiling the Less code.

171
00:13:25,710 --> 00:13:29,961
To do this,
we are going to make use of the nodes

172
00:13:29,961 --> 00:13:33,558
support through that Less C compiler,

173
00:13:33,558 --> 00:13:38,900
that is a node module that can
be installed on your system.