在这个练习里面 我们会探索 Bower 的大量细节 首先我们要在电脑里安装 Bower 然后 我们我们会使用 Bower 来自动获取 Bootstrap 以及 Font Awesome 最后 我们要把这些通过 Bower 获取的组件 用在我们的网页上 现在你可能会问 我们已经有Font Awesome的文件 我们也已经有Bootstrap的文件了 
为什么又要重新再来一次呢 ? 主要的原因是 了解 Bower 如何将这个过程自动化的 当然 在接下来的几课中 你会越来越清楚地看到 为什么这些工具对你工作流程的系统化是至关重要的 安装 Bower 的时候 我们需要将它安装为 全局 Node 组件 或者说全局 Node 模块 要做到这点 我们要在命令行中输入 npm install -g 
-g的意思是全局(global) 然后 再输入 bower 再一次提醒 如果你在用 Mac 或者 Linux 机器的话 那你要在这个命令前面加上 sudo 命令 因为我在用 Mac 所以我把 sudo 命令加在这里 然后按下回车键 稍等一下 直到 Node 把 Bower 下载完成并且安装为全局模块 安装完成后 Bower 就可以使用了 我们看到 NPM 利用了这个叫做 package.json 的清单文件 与此相似 Bower 也利用一个叫做 bower.json 的文件 来追踪你在当前项目中使用的所有组件 我们会建立这个 bower.json 文件 要做到这一点 你可以打开一个已有的 bower.json 文件 然后复制里面的内容 现在我要向你展示的建立 bower.json 文件的方法 是使用 bower init 命令 当你在命令提示符窗口里输入 bower init 的时候 它会问你一系列的问题 并且为你初始化 bower.json 文件 让我们过一下这个流程 名字的话我会用 conFusion 这是我们到目前为止一直在构建的网站项目 至于版本号 我会用1 到作者名 你可以输入你自己的名字 这不重要 输入什么都可以 当你输入完 Bower 所有提问的答案时 就有一个 bower.json 文件为你建立好了 现在这个 bower.json 文件在 conFusion 文件夹里 让我们检查一下这个 bower.json 文件的内容 就是刚刚建立的这个 在这个我刚刚用 Brackets 打开的文件里 可以看到它包含了我们输入的所有信息 这个文件以 JSON 的格式存储 所以它总是一个关键词和一个值的配对 在这个文件里你会留意到 "name" 已经被赋值为 "conFusion" 还有 "vesion" "description" 都是我们输入 bower init 之后 回答的问题 因此这里保存了所有的这些信息 现在 我们准备要安装一些 构建网站所需的组件 让我们来看看怎么利用 Bower 来安装 Bootstrap 要做到这个 我们要在命令行中输入 bower install bootstrap -S 这个 -S 的参数是把安装信息保留到我的 bower.json 文件的 当我完成了安装 我们可以检查一下 bower.json 文件 看看它是怎样被更新的 让我们按下回车键 观察 Bower 为我们获取 Bootstrap 的文件 当 Bower 从 git 仓库 (git depository) 中获取 Bootstrap 文件时 它发现 Bower 依赖于 jQuery 因此 Bower 会自动获取 jQuery 为我们解决这个依赖问题 下一个我们需要的是 font-awesome 要获取 font-awesome, 我们要在命令提示符窗口里输入 bower install font-awesome -S 坐下来慢慢等 等 Bower 为我们获取 font-awesome 文件 好了。 我们准备好了所有东西 可以继续我们的项目了 为了理解 Bower 做了什么 让我们进入 conFusion 文件夹 你会留意到 conFusion 文件夹里 有一个文件夹叫做 bower_components 让我们进入 bower_components 文件夹 看看里面有什么 进入 bower_components 文件夹之后 你会看到这里有三个文件夹 分别是 bootstrap, font-awesome 以及 jquery 让我们进入到 bootstrap 文件夹 看看里面有什么 在 bootstrap 文件夹里 你可以看到里面有一大堆文件 你会留意到这里有一个 package.json 文件 这是我们所熟悉的 然后还有一个 bower.json 文件 尤其让我感兴趣的这个叫做 dist 的文件 这是一个包含了 bootstrap 文件的发布 (distribution) 文件夹 可以直接用在我们的网页上 当我们进入这个 distribution 文件夹 你会看到里面有三个文件夹 分别是 css, fonts 和 js 记得我们最初下载 ZIP 文件形式的 Bootstrap 时 这个 Bootstrap 的 ZIP 文件就包含了这些东西 因此当我们进入 css 文件夹 你会看到所有的 Bootstrap 文件 js文件夹和fonts文件夹也一样 回到上级目录 进入 font-awesome 文件夹 你会再一次看到 里面有早前我们下载的 font-awesome 的 ZIP 压缩包里面的所有内容 它们已经在这里了 Bower 在幕后为我们完成了所有工作 获取了所有文件 相似地 就像我提到的那样 Bower 发现 Bootstrap 依赖于 jQuery 于是它就自动地为我们获取了 jQuery 将它安装在 bower_components 文件夹里 所以你可以看到 jquery 文件夹在这里 而 jquery 文件夹里面 有一个 distribution 文件夹 里面包含了 jQuery 的 JavaScript 文件 现在 回到 conFusion 文件夹 我们准备要 检查一下我们之前看到的 bower.json 文件的内容了 回到这个 bower.json 文件 如果你向下滚动 你会发现 Bower 写入了一些额外的信息到这个 bower.json 文件 在这里 这些信息存储在 "dependencies" (依赖) 关键词下 这个关键词下面记录了 bootstrap 3.3.5 也就是3.3.5版 而 font-awesome则是版本4.4.0 现在 Bower已经在 bower.json 文件中 记录下这个特定的项目依赖于 Bootstrap 和 Font-Awesome 这就是记录在 "dependencies" (依赖) 那里的信息 你会问 bower.json 文件有什么用? 我很快就会把它的用处展示给你看 让我们先回到 conFusion 文件夹 
然后进入 bower_components 文件夹 我将选中所有这些文件夹然后把它们删除 然后我们让 Bower 帮我们把所有这些东西下载回来 现在 我们已经清空了 bower_components 文件夹 如果想要 Bower 来安装所有这些东西 我们可以去命令行 只需要输入 bower install, Bower就会自动 为你获取所有的程序包 
并且把它们安装在 bower_components 文件夹里面 现在我输入 bower install 按下回车键, Bower 就会为我们照料好安装所有文件的过程 Bower 是怎么知道去哪里找 要安装的程序包的信息的呢? 这就是 bower.json 的威力所在 记得在 bower.json 文件里面 已经记录下了依赖关系 所以当你输入 bower install 的时候
Bower 就会去查询这个 bower.json 文件 它就会看到当前项目依赖于 Bootstrap 和 Font-Awesome 然后它就会为我们获取些组件 现在 我们回到 bower_components 文件夹 你会发现所有文件都重新出现了 现在 你应该会想知道 这些文件都有什么用呢? 在开发大项目时 经常是一组人一起开发 这些文件必须有版本控制 你可能会用 git 仓库 (git repository) 或者某种形式的版本控制系统来登记这些文件 当你登记这些文件 诸如 Bootstrap, Font-Awesome 还有 jQuery 之类的文件就不必存储在你的版本控制系统里面 因为它们没有依赖 你也没有改变它们 唯一需要安装在你的版本控制系统里面的东西 就是你创建的 HTML, JavaScript 和 CSS 文件 除此之外 你还要设置好你的 bower.json 文件 在你的版本控制系统里 这样 如果别人想在他的电脑里重现 这个工程文件夹的结构 他们只需要去VCS 也就是版本控制系统 把所有文件下载到他们的机器里 完成这一步之后 既然他们已经获得了 bower.json 文件 他们就可以直接在命令提示符窗口里输入 bower install Bower 就会照料好获取依赖文件的过程 同样的事情对 Node 的程序包也适用 当你使用了存储在本地的 Node 程序包 记得我们之前创建了一个叫做 package.json 的文件 如果你输入 npm install, npm 会查询你的 package.json 文件 然后为你获取所需的 Node 组件 或者是 Node 模块 然后将它们全部安装好 这就是 Bower 的威力 （power） 所在 抱歉 这并不是一个故意的双关语 现在 当我们回去查看我们的文件夹 用 Brackets 或者任何其他文本编辑器 你会发现 bower_components 文件夹已经出现了 进入这个文件夹 然后在发布 (distribution) 文件夹里 我们已经可以看到 css, fonts 和 js 文件夹了 在我们的 index.html 文件中 我们曾经使用早前下载的 CSS 和 JavaScript 文件 现在我们可以简单地将这些文件替换为 bower_components 中发布文件夹里的相应文件 我将把这些文件的每一个替换为 发布文件中的那些文件 这样做有什么好处呢 ? 再一次 就像我说过的那样 
如果你把这些文件登记在版本控制系统里 别人就可以下载这些文件 然后做一个 bower install 就好了 他们不需要手工地获取任何 Bootstrap 或者 Font-Awesome 文件 相反 这个过程 Bower 已经帮你处理好了 当然这不是我们使用 Bower 的确切方式 但是 Bower 可以帮我们获取所有这些文件 稍后我们还会介绍其他的工具 他们会帮助你建立你的网页并且创建你自己的项目的发布包 然后你可以将这个发布包安装在你的网站服务器上 不过下节课我们再继续讨论这个话题 现在 让我们利用 Bower 为我们获取的文件 回到这些链接 我会将它们替换为 Bower 为我获取的文件 所以在这里我会输入 bower_components bower_components/bootstrap 然后 dist 然后回车 仅此而已
【教育无边界字幕组】翻译：拖延菌 | 校对：鸭肉松 | 审阅：|就这样 这样 替代使用项目文件夹中 css 文件夹里面的 css 文件 这里使用了 Bower 自动获取的
bower_components 里面的文件 然后我会对 bootstrap-theme 文件 font-awesome 的 CSS文件做同样的替换 通过这些变动 我让 index.html 使用了 Bower 为我们获取
并存储在 bower_components 中的 中的CSS文件 去到页面的底部 我还要替换所有的 JavaScript 文件 改为使用 Bower 获取的那些文件 让我们翻到那里 我要把 jquery 部分替换为 bower_components/jquery/dist 你会留意到 jquery.min.js 已经存在了 那个这个 jquery 文件就是我要用的 相似的 对于 bootstrap.min.js 文件 我会替换为 bower_components/boostrap/dist/js/bootstrap.min.js 在这轮替换之后 我们的 index.html 所使用的文件
就全部都是 Bower 为我们获取的 而不是我们早前自行下载的文件 我们还要对 AboutUs.html 和 ContactUs.html 做同样的更新 在完成这些变动之后 如果我们回去 查看我们的网页 你不会发现任何的区别 唯一的区别就是
现在你的网站项目使用了 Bower 获取的文件 而不是我们早前下载的文件 因此通过使用 Bower 你可以节省很多时间 让 Bower 为你代劳 再一次 我们看一下网页 它仍然跟之前一模一样 除了我们现在使用的是 Bower 获取的文件之外
没有任何变化 那么这个练习就完成了 我们学习到了 如何使用 Bower 来自动获取 我们的网站项目所需的程序包和资源文件 在下一节课里 我们会探索其他的工具
翻译: LIYB  | 审阅: Saul Qunming Yuan
Coursera Global Translator Community