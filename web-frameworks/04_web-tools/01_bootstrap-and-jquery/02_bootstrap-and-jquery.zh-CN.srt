1
00:00:02,193 --> 00:00:05,132
现在 让我向你介绍一下应该如何同时使用
Bootstrap 和 jQuery 

2
00:00:05,132 --> 00:00:10,230
来实现 Bootstrap 对 JavaScript 的一些支持功能 

3
00:00:12,650 --> 00:00:18,400
Bootstrap 对 JavaScript 的支持
是通过 JS 插件来实现的 

4
00:00:18,400 --> 00:00:21,420
而这些插件使用 jQuery 写的 

5
00:00:21,420 --> 00:00:26,622
我们已经学过如何单独地将某些插件
应用到我们的网页中 

6
00:00:26,622 --> 00:00:31,570
 又或将整个插件组一起引用 

7
00:00:33,450 --> 00:00:37,100
我们也已经通过这张图学习了 
JavaScript, jQuery 和 Bootstrap 中的 JS 组件 

8
00:00:37,100 --> 00:00:40,940
之间的关系 

9
00:00:42,000 --> 00:00:47,650
我们还学习了如何在
一行 JavaScript 代码也不写的情况下 

10
00:00:47,650 --> 00:00:52,850
通过数据属性来使用 Bootstrap 的 JS 组件 

11
00:00:52,850 --> 00:00:59,420
但显而易见的是 如果我们需要使用
完整的 JavaScript 接口 

12
00:00:59,420 --> 00:01:03,860
我们就需要写一些代码了 

13
00:01:03,860 --> 00:01:09,440
而这也就是我们在这一节需要做的事 

14
00:01:09,440 --> 00:01:13,690
探索如何用 jQuery 或 JavaScript 代码
来控制 Bootstrap 组件 

15
00:01:15,080 --> 00:01:18,810
让我先向你一个 jQuery 的概要吧 

16
00:01:19,840 --> 00:01:23,140
jQuery 是一个轻量级的 JavaScript 库 

17
00:01:24,860 --> 00:01:29,500
不过它的功能非常丰富 同时也提供了很多 

18
00:01:29,500 --> 00:01:34,270
操控 HTML 或 DOM 的方法 

19
00:01:34,270 --> 00:01:39,240
从而你可以用它来直接控制 HTML 元素 

20
00:01:39,240 --> 00:01:45,700
它还允许你增加或移除 CSS 类或是操控 CSS 

21
00:01:45,700 --> 00:01:49,400
还允许你对 HTML 事件作出响应 

22
00:01:49,400 --> 00:01:53,710
并根据不同的的事件来执行特定的代码 

23
00:01:53,710 --> 00:01:56,950
它甚至允许你实现各种炫酷的效果和动画 

24
00:01:56,950 --> 00:02:01,182
同时还允许你通过 AJAX 去和后端服务器交互 

25
00:02:01,182 --> 00:02:04,560
话说 Bootstrap 的 JavaScript 组件 

26
00:02:04,560 --> 00:02:07,720
就是用 jQuery 搭建的 

27
00:02:09,310 --> 00:02:14,360
现在让我们简单地学习一下 jQuery 的语法 

28
00:02:14,360 --> 00:02:20,010
从而可以知晓如何通过它控制
Bootstrap 的 JavaScript 组件 

29
00:02:20,010 --> 00:02:23,420
首先 我们通常会用 $ 作为 jQuery 语句的开头 

30
00:02:23,420 --> 00:02:28,370
因为 $ 会告诉电脑
我们接下来准备要用 jQuery 了

31
00:02:29,390 --> 00:02:33,080
在 $ 之后我们会有一个括号
括号里面的东西叫选择器 

32
00:02:34,250 --> 00:02:40,420
选择器代表的是一个特定的 HTML 元素 

33
00:02:40,420 --> 00:02:43,960
有许多方法可以用来指定选择器

34
00:02:43,960 --> 00:02:46,360
我们马上就会学到 

35
00:02:48,150 --> 00:02:52,874
在选择器后 我们将会指定一个作用在所选择的
HTML 元素上的动作 

36
00:02:52,874 --> 00:02:55,367
这个动作需要和所选择的元素相匹配 

37
00:02:55,367 --> 00:03:00,448
如图所示便是一个栗子 

38
00:03:00,448 --> 00:03:06,488
我选择了 p 这个 HTML 元素
并指定了 hide 这个动作 

39
00:03:06,488 --> 00:03:11,180
这意味着当这段代码执行时 

40
00:03:11,180 --> 00:03:16,285
所有 p 打头的内容都会被隐藏 

41
00:03:17,310 --> 00:03:20,956
类似的 我们还可以用 id 来选择元素 

42
00:03:20,956 --> 00:03:24,814
比如这里 我们就选择了
id 为 mycarousel 的轮播元素 

43
00:03:24,814 --> 00:03:28,911
然后我们指定了 carousel 'pause' 动作 

44
00:03:28,911 --> 00:03:33,860
意味着这将会使指定轮播的滚动停止 

45
00:03:35,220 --> 00:03:40,250
现在让我们来看一个完整的例子 

46
00:03:40,250 --> 00:03:45,780
如图所示 这些代码被框进了 script 标签中 

47
00:03:47,040 --> 00:03:51,780
在这段代码中 我们可以看到我们指定了
document 元素和 ready 动作 

48
00:03:51,780 --> 00:03:57,750
意味着当整个 Bootstrap 文档准备好了后
ready 中的函数将会执行 

49
00:03:57,750 --> 00:04:01,110
而函数是定义在括号里的 

50
00:04:01,110 --> 00:04:05,138
这个函数实现了如下功能 

51
00:04:05,138 --> 00:04:09,908
让所有 data-toggle 属性为 tooltip 的元素 

52
00:04:09,908 --> 00:04:14,042
执行 tooltip 动作 

53
00:04:14,042 --> 00:04:19,760
注意 中括号中的语句其实可以看做是筛选器 

54
00:04:19,760 --> 00:04:25,370
所以这就是如何让所有含有 tooltip 属性的元素 

55
00:04:25,370 --> 00:04:31,040
都支持工具提示的方法 

56
00:04:32,390 --> 00:04:35,640
你是可以将 

57
00:04:35,640 --> 00:04:39,470
任一个 HTML 元素指定为 jQuery 选择器的

58
00:04:39,470 --> 00:04:45,600
所以任一个 HTML 标签 比如 p 或 button 都可以指定为选择器 

59
00:04:45,600 --> 00:04:50,930
这意味着所有相应标签的 HTML 元素 

60
00:04:50,930 --> 00:04:54,770
都会被选为选择器 

61
00:04:55,810 --> 00:04:58,730
你也可以通过 HTML 元素的 id 

62
00:04:58,730 --> 00:05:02,870
来单独地指定一个元素 

63
00:05:04,200 --> 00:05:09,010
你也可以指定一系列拥有 

64
00:05:09,010 --> 00:05:13,340
一个特定类或 CSS 类的元素 

65
00:05:13,340 --> 00:05:22,004
所以你可以指定所有 btn 类元素或是
所有 btn-default 类元素 

66
00:05:22,004 --> 00:05:26,568
你还可以同时指定多种类 

67
00:05:26,568 --> 00:05:30,880
这样的话 就只有那些
同时拥有这些类的元素会被选择 

68
00:05:30,880 --> 00:05:33,560
你也可以通过属性来指定 

69
00:05:33,560 --> 00:05:37,509
比如说 你可以只选择那些 

70
00:05:37,509 --> 00:05:41,118
属性里有 href 的元素 

71
00:05:41,118 --> 00:05:45,300
又或像之前说过的那样 

72
00:05:45,300 --> 00:05:49,810
只选择那些 data-toggle 属性
被设置为 tooltip 的元素 

73
00:05:50,840 --> 00:05:55,670
当前的元素可以用 this 来指定 

74
00:05:55,670 --> 00:06:00,370
使用 this 就意味着当前元素被选择器选择了 

75
00:06:00,370 --> 00:06:04,320
还有其它很多选择器的相关方法
这里就不一一赘述了 

76
00:06:04,320 --> 00:06:11,070
很多情况下 用户与网页的交互 

77
00:06:11,070 --> 00:06:16,830
都会激发一个 DOM 事件 而 jQuery 提供了方法
去响应这些 DOM 事件 

78
00:06:16,830 --> 00:06:22,033
DOM 事件包括但不限于 

79
00:06:22,033 --> 00:06:26,197
鼠标单击 鼠标进入 鼠标移出和键盘交互 

80
00:06:26,197 --> 00:06:32,676
又或是和表格的提交 

81
00:06:32,676 --> 00:06:36,493
以及往一个输入框输入信息 

82
00:06:36,493 --> 00:06:40,810
选择中或取消选择一个输入框 

83
00:06:40,810 --> 00:06:45,527
或甚至 对整个 document 窗口的操作 

84
00:06:45,527 --> 00:06:50,800
比如载入 重载大小或卸下窗口 

85
00:06:50,800 --> 00:06:58,150
所有的这些 DOM 事件都可以用 jQuery 方法
去响应 

86
00:06:59,920 --> 00:07:05,400
让我们用 Bootstrap 中的轮播作为例子
来更好地理解 

87
00:07:05,400 --> 00:07:13,630
如何运用 JavaScript 方法和 jQuery 方法

88
00:07:15,150 --> 00:07:16,780
正如我们学过的 

89
00:07:16,780 --> 00:07:22,040
Bootstrap 的 JavaScript 组件可以通过设置数据属性来使用 

90
00:07:22,040 --> 00:07:26,830
而对于轮播 如图所示 

91
00:07:26,830 --> 00:07:29,670
我们可以设置四种数据属性 

92
00:07:30,840 --> 00:07:36,270
而若想用 JavaScript 来控制这轮播 

93
00:07:36,270 --> 00:07:41,527
我们就可以这样指定 

94
00:07:41,527 --> 00:07:46,187
选择器通过指定 carousel 类 

95
00:07:46,187 --> 00:07:51,144
来选出拥有 carousel 类的元素
然后对这些元素作出 carousel 动作 

96
00:07:51,144 --> 00:07:55,068
carousel 动作可以囊括之前用数据属性
设置的所有东西 

97
00:07:55,068 --> 00:07:58,774
比如说设置间隔 

98
00:07:58,774 --> 00:08:02,811
我们可以将轮播的滚动间隔调至一个特定的值 

99
00:08:02,811 --> 00:08:09,603
在这个例子里面 我们就将间隔设置为了 2000 毫秒 也就是 2 秒 

100
00:08:10,926 --> 00:08:15,459
我们也可以设置其它属性 

101
00:08:15,459 --> 00:08:19,530
比如 cycle 

102
00:08:19,530 --> 00:08:24,810
这是让你设定你的轮播是向左滚还是向右滚 

103
00:08:24,810 --> 00:08:31,710
比如 pause 可以让你设定是否将滚动暂停 

104
00:08:31,710 --> 00:08:36,550
比如 number 可以让你设置滚动到哪一页 

105
00:08:36,550 --> 00:08:42,070
你可以设置为 0 或 1 或 2
来表示你要滚动到第 0 1 2 页 

106
00:08:42,070 --> 00:08:45,310
你可以用 prev 或 next 来设置 

107
00:08:45,310 --> 00:08:47,340
是否去往当前页面的前一页或后一页 

108
00:08:49,250 --> 00:08:54,780
需要注意的是 轮播本身在出现的时候 

109
00:08:54,780 --> 00:08:59,420
会激发两个事件 

110
00:08:59,420 --> 00:09:03,150
其一是 slide.bs.carousel 事件 

111
00:09:03,150 --> 00:09:07,569
这会在滚动动画开始时被激发 

112
00:09:07,569 --> 00:09:12,204
而 slid.bs.carousel 事件则会在
轮播完成了向下一页面过渡的动画后 

113
00:09:12,204 --> 00:09:15,910
被激发 

114
00:09:15,910 --> 00:09:22,292
那么我们该如何在 jQuery 方法中
利用这两个事件呢 

115
00:09:22,292 --> 00:09:28,134
如图所示 你可以先用 id 来指定你的轮播 

116
00:09:28,134 --> 00:09:32,044
然后你需要在之后指定一个 on 动作 

117
00:09:32,044 --> 00:09:35,625
然后 on 动作接受的第一个参数需是
上述说的两个事件之一 

118
00:09:35,625 --> 00:09:40,902
就是你想要响应的那个事件 

119
00:09:40,902 --> 00:09:45,360
在这个例子里 我们想要响应
slide.bs.carousel 

120
00:09:45,360 --> 00:09:47,340
于是在函数体内 

121
00:09:47,340 --> 00:09:51,840
我们就可以指定我们想要在事件被激发后
响应的代码了 

122
00:09:52,880 --> 00:09:57,750
在我们下个练习中 我们将会看到
以上这些东西的具体实现 

123
00:09:57,750 --> 00:10:02,950
我们还会在轮播中加入两个按钮 

124
00:10:02,950 --> 00:10:08,490
这两个按钮允许我们暂停和继续轮播的滚动 

125
00:10:08,490 --> 00:10:14,340
当然 我们将会学习如何用 JavaScript 代码去实现
【翻译 - Carefree0910】