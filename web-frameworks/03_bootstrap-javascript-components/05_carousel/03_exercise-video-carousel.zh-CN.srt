1
00:00:02,212 --> 00:00:06,250
轮播是一个非常有趣的 Bootstrap 组件

2
00:00:07,490 --> 00:00:11,610
它能将一系列图像在屏幕上
滚动着显示

3
00:00:11,610 --> 00:00:14,660
事实上 使用轮播是一个相当方便的

4
00:00:14,660 --> 00:00:18,280
为你的网站加入动态效果的方式

5
00:00:18,280 --> 00:00:23,230
当然有时你可能会觉得它太花哨了

6
00:00:23,230 --> 00:00:28,470
不过不管怎么说 接下来让我们
学习轮播组件的相关知识吧

7
00:00:28,470 --> 00:00:36,300
首先你要知道 轮播组件是一个
基于 JavaScript 的组件

8
00:00:36,300 --> 00:00:40,850
所以为使其正确运作
我们要引入相应的 JavaScript 支持

9
00:00:42,750 --> 00:00:47,660
接下来我们要在 index.html 的抬头
或说在其超大屏幕之下

10
00:00:47,660 --> 00:00:55,128
加入一个轮播组件

11
00:00:58,337 --> 00:01:01,916
让我们来到 index.html 中

12
00:01:01,916 --> 00:01:07,165
我将会在这个超大屏幕下面
引入一个轮播

13
00:01:07,165 --> 00:01:11,015
我将会把主体内容中剩下三列的内容

14
00:01:11,015 --> 00:01:18,080
移到轮播中

15
00:01:18,080 --> 00:01:20,500
事实上我有打算直接把代码拷过去

16
00:01:21,910 --> 00:01:30,430
轮播将会出现在这超大屏幕之下

17
00:01:30,430 --> 00:01:34,340
当我们实现完轮播后
我们会回来看看其效果

18
00:01:34,340 --> 00:01:38,980
然后你可以看看你是更喜欢轮播

19
00:01:38,980 --> 00:01:43,910
还是更喜欢现在这个样式

20
00:01:43,910 --> 00:01:46,360
不过不论如何 轮播都是一个
有趣的组件

21
00:01:46,360 --> 00:01:51,628
所以让我们来学习其实现吧

22
00:01:51,628 --> 00:01:56,282
来到 HTML 代码这里
我将会实现另一个 content row

23
00:01:56,282 --> 00:01:59,819
也就是一个设置了
class="row row-content" 的 div

24
00:01:59,819 --> 00:02:04,770
然后我会把轮播放在这个 div 中

25
00:02:06,640 --> 00:02:12,400
你可以看到我把代码贴了上来

26
00:02:12,400 --> 00:02:18,590
然后对第二层 div, 我对其设置了
class="col-xs-12" 以占满所有的 12 列

27
00:02:18,590 --> 00:02:23,700
然后这第二层 div 之内
就是我实现轮播的地方

28
00:02:23,700 --> 00:02:26,190
让我先把代码贴上来

29
00:02:26,190 --> 00:02:29,110
然后我们再来看它是怎么运作的

30
00:02:32,450 --> 00:02:36,950
首先是一个设置了

31
00:02:36,950 --> 00:02:42,520
class="carousel slide" 的 div

32
00:02:42,520 --> 00:02:47,213
我还把其 id 设置为了 mycarousel

33
00:02:47,213 --> 00:02:51,712
以及设置了 data-ride="carousel"

34
00:02:53,379 --> 00:02:58,285
然后在这个 div 中 我加进了另一个 div

35
00:02:58,285 --> 00:03:03,440
对这个 div 我设置了
class="carousel-inner"

36
00:03:03,440 --> 00:03:07,200
然后这个 div 中将会包含所有

37
00:03:07,200 --> 00:03:09,158
轮播将要展示的内容

38
00:03:09,158 --> 00:03:14,470
在这个 div 里面

39
00:03:14,470 --> 00:03:20,350
我们要把每一项要展示的内容
封装进一个设置了 class="item" 的 div 中

40
00:03:22,710 --> 00:03:26,250
然后对其中一个 div 还要追加设置
class="active"

41
00:03:26,250 --> 00:03:28,950
这个设置表明当轮播刚开始运作时
该 div 对应的内容将会第一个被呈现

42
00:03:31,240 --> 00:03:34,450
我们可以在我们要展示的内容中
通过 img 标签加进一个图像

43
00:03:34,450 --> 00:03:40,400
你可以看到我已经把我们之前
引入过的那些菜的图片所对应的代码

44
00:03:40,400 --> 00:03:44,710
都贴到了这里

45
00:03:45,920 --> 00:03:50,680
然后除了图像之外

46
00:03:50,680 --> 00:03:53,120
我还引入了对图像的说明

47
00:03:53,120 --> 00:03:57,695
所以我在这里放了一个设置了

48
00:03:57,695 --> 00:03:59,450
class="carousel-caption" 的 div

49
00:03:59,450 --> 00:04:03,850
我可以在这个 div 里面放
相应的菜的信息

50
00:04:03,850 --> 00:04:09,364
事实上你也可以看到

51
00:04:09,364 --> 00:04:13,295
我把相应的菜的信息的代码
都贴了过来

52
00:04:14,504 --> 00:04:20,370
首先我把第一行的菜对应的信息贴了过来

53
00:04:20,370 --> 00:04:25,610
然后是第二行的

54
00:04:25,610 --> 00:04:30,400
然后是第三行的

55
00:04:30,400 --> 00:04:36,180
对每一行的菜 要注意把它的
图像对应的代码和信息对应的代码分开

56
00:04:36,180 --> 00:04:40,130
图像对应的代码可以直接贴过来
信息对应的代码则需封装在一个 div 中

57
00:04:41,780 --> 00:04:45,722
当我们把这三道菜对应的代码
都贴好了之后

58
00:04:45,722 --> 00:04:50,499
我们还需要对我们的 CSS 文件
做一些小小的更改

59
00:04:50,499 --> 00:04:56,129
从而使我们的轮播能够
正确地在屏幕上显示

60
00:04:59,837 --> 00:05:03,175
进入到我们的 mystyles.css 文件

61
00:05:03,175 --> 00:05:08,300
我已经引入了一些 CSS 类

62
00:05:08,300 --> 00:05:10,150
让我们快速地看看它们

63
00:05:10,150 --> 00:05:13,800
并了解它们有啥用

64
00:05:13,800 --> 00:05:16,340
第一个引入 CSS 类是 carousel 类

65
00:05:16,340 --> 00:05:21,410
我设置了 background: #1A237E
意味着我将其背景色设为了深靛蓝色

66
00:05:21,410 --> 00:05:26,670
这是因为这个颜色
正是我们导航栏的颜色

67
00:05:26,670 --> 00:05:31,530
从而我们的页面看上去色调是一致的

68
00:05:31,530 --> 00:05:35,150
事实上在设计页面时
保持色调的一致性相当重要

69
00:05:35,150 --> 00:05:40,050
然后对 .carousel .item 组件

70
00:05:40,050 --> 00:05:42,220
我将其高度设置为了 300 像素

71
00:05:42,220 --> 00:05:45,650
由此 我们轮播的高度就会被固定下来

72
00:05:45,650 --> 00:05:51,160
接下来是 .item img 类
这是拿来定制轮播中的图像的

73
00:05:51,160 --> 00:05:56,970
我将其定位设置为了绝对定位
以及将左上角的坐标设置为了 0, 0

74
00:05:56,970 --> 00:06:02,410
这意味着轮播中的图像会
贴在轮播的左边缘

75
00:06:02,410 --> 00:06:09,030
同时左上角坐标为 0, 0

76
00:06:09,030 --> 00:06:13,970
从而图像会贴在

77
00:06:13,970 --> 00:06:18,100
轮播的左上角

78
00:06:18,100 --> 00:06:21,970
我还将图像的最小高度
设置为了 300像素

79
00:06:21,970 --> 00:06:24,300
从而无论图像本身大小如何

80
00:06:24,300 --> 00:06:29,060
该轮播都会将图像的高度
至少拉伸到 300 像素

81
00:06:29,060 --> 00:06:33,780
如果你引入了一个更大的图像的话
那么就会是轮播自身

82
00:06:33,780 --> 00:06:39,791
进行合适的拉伸以包含该图像

83
00:06:39,791 --> 00:06:46,320
那么做完这些改动后
让我们回到我们的网页并看看效果吧

84
00:06:46,320 --> 00:06:47,780
回到我们的网页来

85
00:06:47,780 --> 00:06:52,680
你可以看到这里有一个轮播

86
00:06:54,030 --> 00:06:58,420
如果我将鼠标悬停在轮播上
那么这个轮播就不会继续滚动

87
00:06:58,420 --> 00:07:03,510
如果我将鼠标移开

88
00:07:05,630 --> 00:07:08,190
该轮播就会继续以一定时间间隔
来继续滚动

89
00:07:08,190 --> 00:07:11,000
默认的时间间隔为三秒

90
00:07:11,000 --> 00:07:15,370
也就是说每隔三秒 轮播中的内容
就会更新一次

91
00:07:15,370 --> 00:07:17,796
那么这就是轮播的效果

92
00:07:26,462 --> 00:07:31,420
接下来我将实现两个
对该轮播的控制

93
00:07:31,420 --> 00:07:34,950
第一个控制是在轮播底部显示三个点

94
00:07:36,760 --> 00:07:41,690
每个点对应着一张轮播中的幻灯片

95
00:07:41,690 --> 00:07:46,440
通过点击对应的点
就可以让轮播跳到对应的幻灯片

96
00:07:46,440 --> 00:07:51,750
第二个控制是在轮播的左右
各引入一个按钮

97
00:07:51,750 --> 00:07:55,810
当我们点击它们时

98
00:07:55,810 --> 00:08:01,650
轮播就会向左或向右滚动一下

99
00:08:01,650 --> 00:08:05,590
那么 先让我实现那三个点
或说是轮播的指示器吧

100
00:08:06,780 --> 00:08:11,530
那么在轮播里面 我放了一个 ol 标签
同时 我对其设置了

101
00:08:11,530 --> 00:08:17,570
class="carousel-indicators"

102
00:08:17,570 --> 00:08:22,460
然后在 ol 中 我放了三个 li 标签
对它们的每一个 我都设置了

103
00:08:22,460 --> 00:08:27,240
data-target="#mycarousel"
和 data-slide-to 属性

104
00:08:27,240 --> 00:08:31,940
这个属性是拿来指定其导向的
幻灯片的下标的

105
00:08:31,940 --> 00:08:36,280
如果你想让该指示器
将你导向第一张幻灯片

106
00:08:36,280 --> 00:08:39,460
由于下标是从 0 开始的
所以你只需设置

107
00:08:39,460 --> 00:08:42,850
data-slide-to="0" 即可

108
00:08:42,850 --> 00:08:47,020
同时 对相应的 li
设置上 class="active"

109
00:08:49,960 --> 00:08:54,490
接下来就是一左一右两个按钮了

110
00:08:56,060 --> 00:09:01,190
当我们点击这两个按钮时

111
00:09:01,190 --> 00:09:04,010
该轮播会相应地

112
00:09:04,010 --> 00:09:07,650
向左或向右滚动一下

113
00:09:07,650 --> 00:09:12,535
以左边的按钮为例 实现的方法是应用 a 标签
并对其设置上 role="button"

114
00:09:12,535 --> 00:09:16,955
以表示其为按钮

115
00:09:16,955 --> 00:09:22,205
同时还要设置
class="left carousel-control"

116
00:09:22,205 --> 00:09:28,190
和 href="#mycarousel" 来指向轮播

117
00:09:28,190 --> 00:09:31,990
然后在 a 标签里面 我应用了一个
相应的 glyphicon 图标

118
00:09:31,990 --> 00:09:36,380
同理设置好右边的按钮

119
00:09:37,725 --> 00:09:41,355
只要把所有 left 改成 right 就差不多了

120
00:09:41,355 --> 00:09:43,899
做完这些后 让我们回到我们的网页

121
00:09:43,899 --> 00:09:47,805
并看看有哪些变化

122
00:09:50,117 --> 00:09:51,487
来到我们的网页

123
00:09:51,487 --> 00:09:56,187
你可以看到轮播下面有三个点

124
00:09:56,187 --> 00:10:02,893
其中一个是填充了的点
另外两个则是空心的

125
00:10:02,893 --> 00:10:05,803
这三个点正是该轮播的指示器

126
00:10:05,803 --> 00:10:09,293
比如如果我想看第三张幻灯片

127
00:10:09,293 --> 00:10:13,943
我只需点击这第三个点即可

128
00:10:13,943 --> 00:10:17,639
这些指示器事实上

129
00:10:17,639 --> 00:10:20,891
就是这个轮播的一个微型导航

130
00:10:22,101 --> 00:10:26,351
同时 你可以看到轮播的左右边缘处

131
00:10:26,351 --> 00:10:31,850
分别有一个向左和向右的小箭头

132
00:10:31,850 --> 00:10:37,120
当我点击向右的箭头时
轮播会滚向下一张幻灯片

133
00:10:37,120 --> 00:10:40,990
同样的 如果我点击向左的这个箭头
轮播就会向前滚动一下

134
00:10:40,990 --> 00:10:46,070
总之这些功能

135
00:10:46,070 --> 00:10:50,830
能够让你人工地控制该轮播的表现

136
00:10:50,830 --> 00:10:52,920
所以说轮播是一个有趣的组件
它为你的网页

137
00:10:52,920 --> 00:10:58,140
加入了一些动态效果
【翻译 - Carefree0910】