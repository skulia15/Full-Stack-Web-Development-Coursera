1
00:00:01,840 --> 00:00:04,720
接下来就让我们学习一下

2
00:00:04,720 --> 00:00:08,375
Bootstrap 的滚动监听
和附加导航插件吧

3
00:00:08,375 --> 00:00:14,320
滚动监听插件常常被应用在导航上

4
00:00:14,320 --> 00:00:18,641
从而当你滚动页面时

5
00:00:18,641 --> 00:00:23,641
能够在导航元素中实时地高亮

6
00:00:23,641 --> 00:00:27,850
你当前页面的部分

7
00:00:27,850 --> 00:00:32,515
这样一来 你就能大概地掌握

8
00:00:32,515 --> 00:00:39,270
你当前阅览的部分
在页面所有内容中的相对位置

9
00:00:39,270 --> 00:00:41,010
为使你更清楚滚动监听的功用

10
00:00:41,010 --> 00:00:44,800
我们先来看一个栗子吧

11
00:00:44,800 --> 00:00:49,420
至于其具体实现 我们之后会说

12
00:00:49,420 --> 00:00:51,610
顺带一提 在某种意义上
滚动监听和附加导航是同心一体的

13
00:00:51,610 --> 00:00:54,472
这也是为什么我把
它们放在一起来教你们

14
00:00:57,263 --> 00:01:03,505
为理解这两个插件 让我们去
Bootstrap 的官网看看吧

15
00:01:03,505 --> 00:01:05,236
也就是 getbootstrap.com

16
00:01:05,236 --> 00:01:11,080
而我现在这个页面
则是其中的 JavaScript 部分

17
00:01:11,080 --> 00:01:18,770
你可以看到右边这里
有一个导航栏

18
00:01:18,770 --> 00:01:22,950
这些应该是用 nav-pills 实现的

19
00:01:22,950 --> 00:01:27,746
然后当你滚动页面时

20
00:01:27,746 --> 00:01:31,992
你可以看到右边这个导航栏
会随着往上滚动

21
00:01:33,720 --> 00:01:37,944
然后当这个导航栏"撞"到
页面的顶部时

22
00:01:37,944 --> 00:01:42,100
你会发现它发生了些微的改变

23
00:01:42,100 --> 00:01:47,380
比如说它会突然跳到某个位置

24
00:01:49,570 --> 00:01:53,530
并从此固定在那里

25
00:01:53,530 --> 00:01:58,310
然后当你继续滚动页面时

26
00:01:58,310 --> 00:02:03,190
你可以发现与你当前阅览的部分
相对应的导航栏的部分被高亮了出来

27
00:02:04,290 --> 00:02:08,719
然后当你继续滚动时

28
00:02:08,719 --> 00:02:13,277
相应的,分得更细的导航元素
又会相应地被高亮

29
00:02:13,277 --> 00:02:15,589
即使你很快地滚动页面

30
00:02:15,589 --> 00:02:20,695
在每一个时间点上 通过改变颜色

31
00:02:20,695 --> 00:02:26,303
相应的导航元素都会被高亮出来

32
00:02:29,177 --> 00:02:33,690
而如果你向回滚动

33
00:02:33,690 --> 00:02:40,060
并一直滚动到页面顶部时

34
00:02:40,060 --> 00:02:45,150
你能看到刚刚的行为
被"倒带"了一遍

35
00:02:45,150 --> 00:02:52,209
这种效果就是用
滚动监听和附加导航实现的

36
00:02:52,209 --> 00:02:56,920
其中滚动监听允许我们获得

37
00:02:56,920 --> 00:03:01,300
当前我们网页的位置并通过

38
00:03:01,300 --> 00:03:05,685
高亮相应的导航元素来反馈

39
00:03:05,685 --> 00:03:10,824
而附加导航则允许你让你的
导航元素实现一定的定位

40
00:03:10,824 --> 00:03:15,227
比如当页面滚动到特定的地方时

41
00:03:15,227 --> 00:03:19,350
附加导航插件可以将你的
导航元素固定在页面的某个部分

42
00:03:19,350 --> 00:03:24,170
这是通过改变相应元素的
CSS 的 position 属性来实现的

43
00:03:24,170 --> 00:03:28,710
具体而言 就是把 position
从 relative 换成 fixed

44
00:03:32,627 --> 00:03:37,450
为激活滚动监听插件

45
00:03:37,450 --> 00:03:42,040
我们需要对网页中我们想要
追踪的那个元素

46
00:03:42,040 --> 00:03:47,120
设置特定的 data 属性

47
00:03:47,120 --> 00:03:51,110
由于滚动监听要求
其作用的元素的

48
00:03:51,110 --> 00:03:54,340
position 属性为 relative

49
00:03:54,340 --> 00:03:59,660
所以一般而言最简单的做法就是

50
00:03:59,660 --> 00:04:02,820
对 body 标签应用滚动监听

51
00:04:02,820 --> 00:04:06,540
因为 body 标签的 position 属性
默认就是 [relative]

52
00:04:06,540 --> 00:04:11,276
如果你确实对 body 标签
应用了滚动监听的话

53
00:04:11,276 --> 00:04:16,960
那么它就会监听 body 标签里面
那些内容相对页面的方位

54
00:04:18,955 --> 00:04:23,285
具体的实现亦不复杂

55
00:04:23,285 --> 00:04:28,017
只需对 body 设置
data-spy="scroll" 即可

56
00:04:28,017 --> 00:04:32,637
注意到我还设置了
data-target="#myScrollspy"

57
00:04:32,637 --> 00:04:35,877
其中 myScrollspy 正是我们接下来
要实现的导航元素的 id

58
00:04:35,877 --> 00:04:43,337
你可以看到在这个栗子里
我就对一个 nav 标签设置了这个 id

59
00:04:43,337 --> 00:04:46,117
然后你可以看到我还对 body

60
00:04:46,117 --> 00:04:50,900
设置了 data-offset="200"
这意味着对滚动的监听将会从

61
00:04:50,900 --> 00:04:54,420
页面顶部往下 200 像素的位置开始

62
00:04:54,420 --> 00:04:57,480
这是因为在我们这个网页里

63
00:04:57,480 --> 00:05:02,380
我们在它的顶部放了
大概有 200 像素高的

64
00:05:02,380 --> 00:05:04,600
一个 Jumbotron【超大屏幕】

65
00:05:04,600 --> 00:05:09,170
为使效果更好 我们希望

66
00:05:09,170 --> 00:05:13,650
在超大屏幕之后才开始

67
00:05:13,650 --> 00:05:17,900
进行剩余部分的滚动监听

68
00:05:17,900 --> 00:05:21,544
这就是为什么我设置了
data-offset="200"

69
00:05:23,330 --> 00:05:26,860
然后在这个栗子里
我们用了一个 nav 标签

70
00:05:26,860 --> 00:05:31,800
来充当滚动监听的本体

71
00:05:31,800 --> 00:05:36,700
对这个 nav 标签 我除了对其设置
相应的定制其外观的类以外

72
00:05:36,700 --> 00:05:41,320
我还将它的 id 设置为了

73
00:05:41,320 --> 00:05:45,410
上面 body 标签里面的
data-target 属性的值

74
00:05:45,410 --> 00:05:49,830
然后在 nav 标签里面
我用了一个设置了

75
00:05:49,830 --> 00:05:55,360
class="nav nav-pills nav-stacked"
的 ul 标签

76
00:05:55,360 --> 00:06:01,630
这将会是一个胶囊式的导航元素

77
00:06:01,630 --> 00:06:07,900
而且它将会竖直堆叠

78
00:06:07,900 --> 00:06:14,380
然后在 ul 里面自然就是 li 了

79
00:06:14,380 --> 00:06:19,080
它们对应着页面的
各个不同的行

80
00:06:21,360 --> 00:06:25,300
注意我会对这些行
都设置一个相应的 id

81
00:06:25,300 --> 00:06:29,570
然后在这里这些 li 标签中
我都放了一个 a 标签

82
00:06:31,900 --> 00:06:38,570
这些 a 标签的 href 属性的值
自然就是对应行的 id 了

83
00:06:38,570 --> 00:06:42,504
回到我们的 aboutus.html 网页

84
00:06:42,504 --> 00:06:46,681
你可以看到右边这里有一个

85
00:06:46,681 --> 00:06:49,330
堆叠在一起的胶囊式导航元素

86
00:06:49,330 --> 00:06:56,630
然后当我滚动页面时
你能看到这个导航会随之滚动

87
00:06:56,630 --> 00:06:58,435
不过由于我用了附加导航

88
00:06:58,435 --> 00:07:01,130
所以你可以看到它到一定位置后
就会一直固定在某个地方

89
00:07:01,130 --> 00:07:07,370
然后当你继续滚动时

90
00:07:07,370 --> 00:07:12,060
你可以看到页面显示的内容
所对应的导航元素将被高亮出来

91
00:07:12,060 --> 00:07:15,320
比如我现在看的是 Our History

92
00:07:15,320 --> 00:07:20,170
右边写着 Our History 的导航元素
就被高亮了出来

93
00:07:20,170 --> 00:07:22,080
然后当我继续向下滚动时

94
00:07:22,080 --> 00:07:26,630
你可以看到右边的
被高亮出来的导航元素

95
00:07:26,630 --> 00:07:29,540
也随着页面显示内容的改变
而相对应地改变着

96
00:07:35,039 --> 00:07:38,280
接下来让我们看看
附加导航的具体用法

97
00:07:38,280 --> 00:07:43,370
为使附加导航插件切实地运作
在这个栗子里 我对 ul 标签

98
00:07:43,370 --> 00:07:48,740
设置了 data-spy="affix" 和
data-offset-top="400"

99
00:07:48,740 --> 00:07:53,040
这意味着当我滚动页面时

100
00:07:53,040 --> 00:07:58,570
如果我从顶部算起
滚动了 400 像素的话

101
00:08:00,960 --> 00:08:05,880
那么附加导航插件将会运作

102
00:08:05,880 --> 00:08:11,030
从而将 ul 标签中的

103
00:08:11,030 --> 00:08:16,040
position 这项属性

104
00:08:16,040 --> 00:08:21,680
从 relative 变成 fixed

105
00:08:21,680 --> 00:08:27,650
这是通过更改 ul 标签的

106
00:08:27,650 --> 00:08:33,910
CSS 属性实现的

107
00:08:33,910 --> 00:08:37,370
这项修改将会使这个 ul 标签

108
00:08:37,370 --> 00:08:41,120
一直固定在页面的某个特定位置

109
00:08:41,120 --> 00:08:45,530
总而言之

110
00:08:45,530 --> 00:08:50,183
data-offset-top 这项属性的值
就代表着附加导航激活的位置

111
00:08:50,183 --> 00:08:54,552
在这个栗子里我设置了 400

112
00:08:54,552 --> 00:09:02,055
就意味着从顶部向下滚动 400 像素后
附加导航插件就会运作

113
00:09:02,055 --> 00:09:03,575
那么怎么决定这个值呢 ?

114
00:09:03,575 --> 00:09:09,005
一般来说都是视情况而定的

115
00:09:09,005 --> 00:09:14,815
它取决于你页面的结构

116
00:09:16,225 --> 00:09:20,830
那么复习一下

117
00:09:20,830 --> 00:09:25,480
附加导航需要用
data-spy="affix" 来激活

118
00:09:25,480 --> 00:09:29,960
然后需要用 data-offset-top来定制
在这个栗子里则是设置了 400

119
00:09:29,960 --> 00:09:35,739
特别的 我还将在我们
自己的 CSS 文件中加进一些代码 :

120
00:09:35,739 --> 00:09:41,880
.affix  top: 100px;

121
00:09:41,880 --> 00:09:46,430
这意味着当附加导航插件运作后

122
00:09:46,430 --> 00:09:51,420
我们的导航元素将会固定在

123
00:09:51,420 --> 00:09:55,790
离我们网页页面顶部

124
00:09:55,790 --> 00:10:00,530
100 像素的位置上

125
00:10:03,100 --> 00:10:07,530
回到我们的网页 你可以看到
当我一开始滚动我们的网页时

126
00:10:07,530 --> 00:10:12,800
导航元素会随之滚动

127
00:10:12,800 --> 00:10:16,585
不过当滚动到一定地方后

128
00:10:16,585 --> 00:10:20,682
你可以看到导航元素会
突然被固定到页面的某个位置

129
00:10:20,682 --> 00:10:28,571
具体而言 就是离页面顶部
100 像素的地方

130
00:10:28,571 --> 00:10:36,110
然后接下来无论我滚动多少
导航元素都会一直固定在那里

131
00:10:36,110 --> 00:10:40,748
然后如果我往回滚动的话
如果过了 400 像素那条线

132
00:10:40,748 --> 00:10:45,665
附加导航的效果就会被移除

133
00:10:45,665 --> 00:10:51,550
从而导航元素的表现

134
00:10:51,550 --> 00:10:54,736
将会恢复如初

135
00:10:54,736 --> 00:10:58,120
具体而言就是 position 属性的值
从 fixed 变回了 relative

136
00:11:00,305 --> 00:11:03,470
以上 我们完成了
对附加导航的讨论与学习

137
00:11:04,470 --> 00:11:07,040
在下一个练习里

138
00:11:07,040 --> 00:11:11,430
我们将会同时应用
折叠, 滚动监听和附加导航

139
00:11:11,430 --> 00:11:15,950
我们将会在 aboutus.html 中
应用这些我们刚学过的东西

140
00:11:15,950 --> 00:11:23,920
我们将会把 corporate leadership
这一块封装进折叠里面

141
00:11:23,920 --> 00:11:29,575
然后正如我们刚刚看到的

142
00:11:29,575 --> 00:11:35,082
我们将会在页面右边
实现一个导航元素

143
00:11:35,082 --> 00:11:38,392
我们将会对这个导航元素

144
00:11:38,392 --> 00:11:42,392
同时应用滚动监听和附加导航
从而让这个导航元素

145
00:11:42,392 --> 00:11:48,102
实现刚刚我们看到的效果
【翻译 - Carefree0910】