接下来就让我们学习一下 Bootstrap 的滚动监听
和附加导航插件吧 滚动监听插件常常被应用在导航上 从而当你滚动页面时 能够在导航元素中实时地高亮 你当前页面的部分 这样一来 你就能大概地掌握 你当前阅览的部分
在页面所有内容中的相对位置 为使你更清楚滚动监听的功用 我们先来看一个栗子吧 至于其具体实现 我们之后会说 顺带一提 在某种意义上
滚动监听和附加导航是同心一体的 这也是为什么我把
它们放在一起来教你们 为理解这两个插件 让我们去
Bootstrap 的官网看看吧 也就是 getbootstrap.com 而我现在这个页面
则是其中的 JavaScript 部分 你可以看到右边这里
有一个导航栏 这些应该是用 nav-pills 实现的 然后当你滚动页面时 你可以看到右边这个导航栏
会随着往上滚动 然后当这个导航栏"撞"到
页面的顶部时 你会发现它发生了些微的改变 比如说它会突然跳到某个位置 并从此固定在那里 然后当你继续滚动页面时 你可以发现与你当前阅览的部分
相对应的导航栏的部分被高亮了出来 然后当你继续滚动时 相应的,分得更细的导航元素
又会相应地被高亮 即使你很快地滚动页面 在每一个时间点上 通过改变颜色 相应的导航元素都会被高亮出来 而如果你向回滚动 并一直滚动到页面顶部时 你能看到刚刚的行为
被"倒带"了一遍 这种效果就是用
滚动监听和附加导航实现的 其中滚动监听允许我们获得 当前我们网页的位置并通过 高亮相应的导航元素来反馈 而附加导航则允许你让你的
导航元素实现一定的定位 比如当页面滚动到特定的地方时 附加导航插件可以将你的
导航元素固定在页面的某个部分 这是通过改变相应元素的
CSS 的 position 属性来实现的 具体而言 就是把 position
从 relative 换成 fixed 为激活滚动监听插件 我们需要对网页中我们想要
追踪的那个元素 设置特定的 data 属性 由于滚动监听要求
其作用的元素的 position 属性为 relative 所以一般而言最简单的做法就是 对 body 标签应用滚动监听 因为 body 标签的 position 属性
默认就是 [relative] 如果你确实对 body 标签
应用了滚动监听的话 那么它就会监听 body 标签里面
那些内容相对页面的方位 具体的实现亦不复杂 只需对 body 设置
data-spy="scroll" 即可 注意到我还设置了
data-target="#myScrollspy" 其中 myScrollspy 正是我们接下来
要实现的导航元素的 id 你可以看到在这个栗子里
我就对一个 nav 标签设置了这个 id 然后你可以看到我还对 body 设置了 data-offset="200"
这意味着对滚动的监听将会从 页面顶部往下 200 像素的位置开始 这是因为在我们这个网页里 我们在它的顶部放了
大概有 200 像素高的 一个 Jumbotron【超大屏幕】 为使效果更好 我们希望 在超大屏幕之后才开始 进行剩余部分的滚动监听 这就是为什么我设置了
data-offset="200" 然后在这个栗子里
我们用了一个 nav 标签 来充当滚动监听的本体 对这个 nav 标签 我除了对其设置
相应的定制其外观的类以外 我还将它的 id 设置为了 上面 body 标签里面的
data-target 属性的值 然后在 nav 标签里面
我用了一个设置了 class="nav nav-pills nav-stacked"
的 ul 标签 这将会是一个胶囊式的导航元素 而且它将会竖直堆叠 然后在 ul 里面自然就是 li 了 它们对应着页面的
各个不同的行 注意我会对这些行
都设置一个相应的 id 然后在这里这些 li 标签中
我都放了一个 a 标签 这些 a 标签的 href 属性的值
自然就是对应行的 id 了 回到我们的 aboutus.html 网页 你可以看到右边这里有一个 堆叠在一起的胶囊式导航元素 然后当我滚动页面时
你能看到这个导航会随之滚动 不过由于我用了附加导航 所以你可以看到它到一定位置后
就会一直固定在某个地方 然后当你继续滚动时 你可以看到页面显示的内容
所对应的导航元素将被高亮出来 比如我现在看的是 Our History 右边写着 Our History 的导航元素
就被高亮了出来 然后当我继续向下滚动时 你可以看到右边的
被高亮出来的导航元素 也随着页面显示内容的改变
而相对应地改变着 接下来让我们看看
附加导航的具体用法 为使附加导航插件切实地运作
在这个栗子里 我对 ul 标签 设置了 data-spy="affix" 和
data-offset-top="400" 这意味着当我滚动页面时 如果我从顶部算起
滚动了 400 像素的话 那么附加导航插件将会运作 从而将 ul 标签中的 position 这项属性 从 relative 变成 fixed 这是通过更改 ul 标签的 CSS 属性实现的 这项修改将会使这个 ul 标签 一直固定在页面的某个特定位置 总而言之 data-offset-top 这项属性的值
就代表着附加导航激活的位置 在这个栗子里我设置了 400 就意味着从顶部向下滚动 400 像素后
附加导航插件就会运作 那么怎么决定这个值呢 ? 一般来说都是视情况而定的 它取决于你页面的结构 那么复习一下 附加导航需要用
data-spy="affix" 来激活 然后需要用 data-offset-top来定制
在这个栗子里则是设置了 400 特别的 我还将在我们
自己的 CSS 文件中加进一些代码 : .affix  top: 100px; 这意味着当附加导航插件运作后 我们的导航元素将会固定在 离我们网页页面顶部 100 像素的位置上 回到我们的网页 你可以看到
当我一开始滚动我们的网页时 导航元素会随之滚动 不过当滚动到一定地方后 你可以看到导航元素会
突然被固定到页面的某个位置 具体而言 就是离页面顶部
100 像素的地方 然后接下来无论我滚动多少
导航元素都会一直固定在那里 然后如果我往回滚动的话
如果过了 400 像素那条线 附加导航的效果就会被移除 从而导航元素的表现 将会恢复如初 具体而言就是 position 属性的值
从 fixed 变回了 relative 以上 我们完成了
对附加导航的讨论与学习 在下一个练习里 我们将会同时应用
折叠, 滚动监听和附加导航 我们将会在 aboutus.html 中
应用这些我们刚学过的东西 我们将会把 corporate leadership
这一块封装进折叠里面 然后正如我们刚刚看到的 我们将会在页面右边
实现一个导航元素 我们将会对这个导航元素 同时应用滚动监听和附加导航
从而让这个导航元素 实现刚刚我们看到的效果
【翻译 - Carefree0910】