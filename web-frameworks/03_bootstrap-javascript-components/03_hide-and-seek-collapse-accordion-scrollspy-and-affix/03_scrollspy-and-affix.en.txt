Let us now understand the Scrollspy and Affix plug-ins that
are available within Bootstrap. The Scrollspy plug-in is
applied to a nav element, such that as you scroll your web page, whatever is currently
visible on the screen will be highlighted in the nav page. So that the corresponding nav
element In the nav bar, or in the nav item that you display,
would be highlighted on the screen. It is best for us to go and look at an example to understand this
behavior before we come back and examine how we would implement
the Scrollspy and the Affix plugin. These two go together in some sense, so that's the reason why I'm
covering the two together. To understand these two plugins,
let's go to our bootstrap web page itself. Getbootstrap.com and I am right now under the Javascript
part of the bootstrap web page. You can see that on the right side,
we have a nav bar here. This must have been
implemented using nav-pills. So as you scroll, you can see that the nav bar on the right side, scrolls up. As you scroll the page,
but when you hit the top, notice the subtle change in the behavior. When the scroll goes up to a certain
point, the nav bar suddenly jumps up and
then gets itself fixed to a location. As you scroll now you can see
that the item that you're viewing on the webpage gets
highlighted in the nav items there. And as you keep scrolling, the individual items get highlighted
in the nav bar there. So scrolling more quickly, you can see that at every single
point the corresponding item in the nav is being highlighted by
changing its color on the right side. Scrolling further you can see that
behavior again one more time. When you scroll back, you will see
that the plugin again jumps back and then starts scrolling back
with the page at some point. Now, these two behaviors are implemented
using the Scrollspy and Affix plugins. The Scrollspy plugin tracks the current scroll position of the web page,
and then reflects that by highlighting the appropriate
nav item in the nav element there. The Affix plug-in enables your nav
element to move with the scroll up to a certain point and
when it reaches a certain point, then the Affix plugin
will fix the position. This is done by changing
the position CSS property of that element from relative
to fixed position. The Scrollspy plugin
is enabled as follows. We need to apply certain
data attributes to an element of the webpage
which we want to track. Now Scrollspy expects that
this element of the web page will have a position that's relative. Now this is easiest done by
assigning this to the body element of our web page,
our body tag of our web page, because the body tag by default
gets the position [INAUDIBLE]. So which means that the Scrollspy will
be able to track the scroll position of the inner elements inside the body tag. To do that,
we are going to assign to the body a data spy attribute with scroll. And then I gave the data
target pointing to the ID of the scroll nav element that
we're going to introduce later. So in this example, I am giving the nav
element a an ID as myScrollspy. And so
that’s why I’m giving you the data target. And the data offset is 200, which means
that the actual tracking of the scroll position begins 200 pixels from the top. So this is the offset that we give, essentially to avoid tracking
the upper 200 pixels. Recall that when you
look at your web page, the top part of the web page
contains the jumbotron. We are not going to track the part of the
jumbotron, we want to track the rest of our content of the webpage,
the actual content in our webpage. So that's why I have given
it a data offset of 200. Now, to apply the Scrollspy itself, I need to introduce a nav
element into my webpage. To this nav element, I introduce
the property classes, but, in particular, I give it an id,
which is the same as the ID that I use in the data target in my body tag. Now inside that,
we will use the UL class with the nav and in this example I am using the nav-pills
and nav-stacked classes there. So this will create the nav
element as a nav-pills element with the pills stacked vertically,
one on top of the other. Now, inside here, of course, I have
the list Items here each corresponding to the various content rows
that I have in my webpage. For each of those rows I need
to give the corresponding id that I am using in the href attribute for
these a tags here. Let us now see this Scrollspy
in action on our webpage. So I have used this inside
my aboutus.html page. So you can see that I have the nav
element on the right side, which is a nav-pills stacked. So as I scroll the page, you can see
that the nav element scrolls with it. I’m also using the affix here, so I'm going to explain the affix
part a little bit later. So as you scroll,
as our row comes into our view there, the corresponding item Is being
highlighted in my nav element. So I can see that currently,
I'm viewing the History. So as I scroll to see the Corporate,
that will be highlighted. And then as I scroll past, and then the Facts & Figures come up, that
item will be highlighted in the nav page. Scrolling backwards,
you see the same behavior one more time. Now let's look at how
the affix part of it works. So for the affix plugin to work, you see
that for the ul class I have given it the data spy attribute as affix and
then I set the data-offset-top as 400. This means that as the scrolling happens, when my webpage scrolls past
the 400 pixel mark from the top, up to that point my nav element will
scroll together with the webpage. At that point,
what happens is that the affix plugin will change the class given to this ul from affix top to
the affix class there. Now, when the change happens,
the position CSS property of this nav element will be changed from
position relative to position fixed. So at that point this
nav element gets fixed on the webpage to a specific location. Now, when does that fixing get triggered? That is specified by the data-offset-top
attribute that I am giving here. And then I am specifying
the position is 400, so when you scroll past the 400 pixel mark,
at that point that nav element gets fixed. How do you decide this? That you will have to look at the
structure of your webpage and then decide at what point it is appropriate to fix
that nav element into a given position. So, again, reviewing, we see that
the Affix plugin is triggered by using the data-spy in the affix, and the data-offset-top with 400 applied
to the ul class that we saw. In addition, inside my style
start CSS file I am going to add an affix class with the property
as top fixed to 100 pixels. What this means is that my
nav element is going to be fixed from the top position
of the webpage, 200 pixels. So when I change the position
property to position fixed, the location is 100 pixels
from the top of the webpage. Going back to our webpage,
you see that as I scroll the webpage my nav
element scrolls with it. But at a certain point,
the nav element gets fixed there, so you can see the triggering of
the fixing of the nav element there. That nav element now is fixed at 100
pixels from the top of the webpage there, and subsequently will remain fixed
at that position when I scroll. When I scroll back again,
when I reach the 400 pixel mark, then the affix class will be removed and affix top class will be fixed,
will be given to this nav element. And then the position is changed
to relative at that point, so that's why the nav element,
again, scrolls with the web page. This completes our discussion
on the Affix plugin. Now, in the next exercise, we're going to make use of the accordion,
the Scrollspy and Affix, and then apply each to the aboutus.html
page that we have been designing so far. We're going to enclose the corporate
leadership content into an accordion and we're gonna add another nav
element to the right hand side to track the position of
the scroll of our webpage. So we're going to make use of
the Scrollspy for this purpose. And then we're going to
that Scrollspy nav element, we're gonna apply the Affix plugin to fix
the position when we scroll the webpage.