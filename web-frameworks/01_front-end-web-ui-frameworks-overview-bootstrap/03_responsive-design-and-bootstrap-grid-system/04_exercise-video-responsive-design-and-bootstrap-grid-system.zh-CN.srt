1
00:00:01,460 --> 00:00:07,090
下面我们要进行一个实作练习

2
00:00:07,090 --> 00:00:14,280
我们从上一个练习所完成的网页开始

3
00:00:14,280 --> 00:00:18,460
现在我们要把 Bootstrap 的网格类引入到网页中

4
00:00:18,460 --> 00:00:23,350
恰当地把内容布置好

5
00:00:23,350 --> 00:00:28,710
此外 我们还要引入一些定制的CSS类

6
00:00:28,710 --> 00:00:37,050
让我们再一次检查一下网页的HTML代码

7
00:00:38,840 --> 00:00:42,790
在Brackets中打开我们的HTML代码

8
00:00:42,790 --> 00:00:48,300
我们会看到在网页的顶端 <head>的部分

9
00:00:48,300 --> 00:00:54,290
已经有了之前介绍的视域元标记 (viewport metatag)

10
00:00:54,290 --> 00:01:00,760
这是网页的响应式行为的基础

11
00:01:02,280 --> 00:01:07,290
我们现在要把纵列 (column) 类应用在

12
00:01:07,290 --> 00:01:13,370
网页主体的各个不同的 div 上

13
00:01:14,710 --> 00:01:20,330
移动到网页主体的页首处

14
00:01:21,440 --> 00:01:28,930
我要把网格系统的纵列 (column) 类应用在
Jumbotron 里面的两个内部 div 标签上

15
00:01:28,930 --> 00:01:33,715
要这样做 我首先给第一个 div 添加一个 column 类

16
00:01:33,715 --> 00:01:39,328
col-xs-12

17
00:01:39,328 --> 00:01:44,459
col-sm-8

18
00:01:44,459 --> 00:01:47,110
这样 这项内容在超小屏幕上显示时

19
00:01:48,300 --> 00:01:52,360
就会占据屏幕的整个宽度

20
00:01:52,360 --> 00:02:00,180
但在小屏幕到大屏幕的尺寸上 它将会占据 8 个纵列

21
00:02:00,180 --> 00:02:06,200
还有另一个 div 在这个 Jumbotron 里面

22
00:02:06,200 --> 00:02:09,200
目前这个 div 没有内容

23
00:02:09,200 --> 00:02:15,400
稍后 我计划在这个 div 里面加上一个餐厅的商标

24
00:02:15,400 --> 00:02:20,100
暂时我会把这个 div 留空 但我会先把纵列类加在这个 div 上

25
00:02:20,100 --> 00:02:24,910
让它占据剩余的纵列数

26
00:02:24,910 --> 00:02:30,610
对于这个 div 我会写 col-xs-12 和 col-sm-4 

27
00:02:30,610 --> 00:02:36,586
因为从小屏幕到大屏幕的尺寸上 我们还剩下4个纵列数

28
00:02:36,586 --> 00:02:40,420
空在这一行的右边

29
00:02:40,420 --> 00:02:45,560
一旦完成了这一项 让我们翻到

30
00:02:45,560 --> 00:02:48,790
网页实际内容中的 div

31
00:02:48,790 --> 00:02:53,380
这些 div 每一个都有标题以及

32
00:02:53,380 --> 00:02:55,000
以及实际的内容

33
00:02:55,000 --> 00:03:00,600
因此对于标题部分我会分配较少的纵列数

34
00:03:00,600 --> 00:03:06,300
而对于详细的内容 我则会让它占据更多的纵列数

35
00:03:06,300 --> 00:03:11,980
要这样做 我会在两个 div 上

36
00:03:11,980 --> 00:03:13,790
应用不同的纵列类

37
00:03:13,790 --> 00:03:18,320
对于超小尺寸的屏幕 我希望把它们上下堆叠起来

38
00:03:18,320 --> 00:03:23,460
但对于小尺寸到大尺寸的屏幕 
我希望他们并列显示

39
00:03:24,870 --> 00:03:31,750
让我们在这些内部 div 上面应用这些纵列类吧

40
00:03:31,750 --> 00:03:36,840
对于包含了标题的 div, 我会加入 col-xs-12 和

41
00:03:36,840 --> 00:03:41,980
col-sm-3 而对于其他的 div, 我会

42
00:03:41,980 --> 00:03:46,950
使用剩余的纵列

43
00:03:46,950 --> 00:03:50,290
想想我会怎么去做 好了 都完成了

44
00:03:51,340 --> 00:03:55,480
让我对网页实际内容中剩下的行

45
00:03:55,480 --> 00:03:57,980
都重复这项工作

46
00:03:59,660 --> 00:04:03,390
而对于页脚的 div, 我会

47
00:04:03,390 --> 00:04:07,940
在小到大尺寸屏幕下让第一个 div 

48
00:04:07,940 --> 00:04:13,590
占据 3 个纵列 让第二个 div 占据 5 个纵列

49
00:04:13,590 --> 00:04:16,650
从小屏幕到中等屏幕直到大屏幕

50
00:04:16,650 --> 00:04:20,740
而最后一个 div 占据剩余的纵列

51
00:04:20,740 --> 00:04:23,860
但在超小尺寸屏幕下我会让第一和

52
00:04:23,860 --> 00:04:26,390
第二个 div 各占据 6 个纵列

53
00:04:26,390 --> 00:04:29,420
而让第三个占据全部 12 个纵列

54
00:04:30,510 --> 00:04:38,410
而版权声明 我会让它扩张到全部 12 个纵列

55
00:04:38,410 --> 00:04:43,190
让我把这些纵列类应用到这些 div 上 我们再回过头来

56
00:04:43,190 --> 00:04:44,890
看看整个完成版的网页

57
00:04:44,890 --> 00:04:49,270
我现在已经完成了所有的变动

58
00:04:49,270 --> 00:04:52,050
让我们来看一看页面

59
00:04:52,050 --> 00:04:54,790
你现在可以看到网页是如何被渲染的

60
00:04:54,790 --> 00:04:59,920
你可以看到这个Jumbotron

61
00:04:59,920 --> 00:05:02,850
饭店名和描述占据着左边的 8 个纵列

62
00:05:02,850 --> 00:05:08,190
然后右边有空白的位置 稍后我们在这里加上商标

63
00:05:08,190 --> 00:05:11,470
这会是我们下一个模块的练习的一部分

64
00:05:11,470 --> 00:05:17,560
然后我们看到三大块的内容

65
00:05:17,560 --> 00:05:23,900
被布置成标题占据 3 个纵列在左边

66
00:05:23,900 --> 00:05:30,150
实际的长描述占据剩余的 9 个纵列放在这里

67
00:05:30,150 --> 00:05:35,760
下来到页脚处 你可以看到链接占据了 3 个纵列

68
00:05:35,760 --> 00:05:38,040
地址占据了 5 个纵列

69
00:05:38,040 --> 00:05:44,900
然后 指向我们的社交网站的链接占据了剩下的 4 个纵列

70
00:05:44,900 --> 00:05:53,265
下面的版权声明横跨了整行的 12 个纵列

71
00:05:55,195 --> 00:06:00,245
让我们现在来检查一下网页的响应式行为

72
00:06:00,245 --> 00:06:05,730
现在 开着这个网页 让我慢慢缩小网页的宽度

73
00:06:05,730 --> 00:06:12,010
看看网页是如何响应屏幕尺寸的减小的

74
00:06:12,010 --> 00:06:14,980
现在这是 1280 像素

75
00:06:14,980 --> 00:06:19,150
这是我正在用的屏幕的宽度

76
00:06:19,150 --> 00:06:24,250
我会渐渐缩小这个宽度 你就可以看到

77
00:06:24,250 --> 00:06:32,010
屏幕宽度减小时 网页排版的变化

78
00:06:32,010 --> 00:06:34,830
现在这个网页仍然在小尺寸屏幕上

79
00:06:34,830 --> 00:06:39,630
你可以看到网页的排版像这样

80
00:06:39,630 --> 00:06:42,890
让我们看看超小屏幕尺寸上会发生什么

81
00:06:46,000 --> 00:06:50,190
现在你可以看到 当我从小尺寸换到超小尺寸时

82
00:06:50,190 --> 00:06:55,460
马上我们的内容排版就发生了改变

83
00:06:55,460 --> 00:07:01,630
现在 饭店的描述还有

84
00:07:01,630 --> 00:07:06,800
饭店名称都占据了整个屏幕的宽度

85
00:07:06,800 --> 00:07:11,570
原来并排的这两个项目现在变成了

86
00:07:11,570 --> 00:07:13,620
上下堆叠

87
00:07:13,620 --> 00:07:16,610
再看一下页脚

88
00:07:16,610 --> 00:07:20,850
你看到链接和地址现在并排显示

89
00:07:21,910 --> 00:07:26,730
而指向我们的社交网站的链接现在显示在

90
00:07:28,310 --> 00:07:34,810
一个单独的行里 占据了整个屏幕的宽度

91
00:07:34,810 --> 00:07:37,130
版权声明则保持不变

92
00:07:37,130 --> 00:07:42,860
现在你可以看到我们是如何在我们的网页中引入响应性的

93
00:07:45,110 --> 00:07:48,930
我们可以看到在网页中 

94
00:07:48,930 --> 00:07:54,920
所有行中的标题和描述都使用了类似的排版方式

95
00:07:54,920 --> 00:07:58,120
现在我想要做一个细小的改动

96
00:07:58,120 --> 00:08:01,500
让某些行对调标题和描述

97
00:08:01,500 --> 00:08:06,980
特别是第 1 和第 3 行

98
00:08:06,980 --> 00:08:11,900
那么这个网页就需要多一些有趣的特性

99
00:08:11,900 --> 00:08:13,380
我们要怎么做到这一点呢

100
00:08:13,380 --> 00:08:15,700
这就是我们之前讨论过的

101
00:08:15,700 --> 00:08:20,510
push, pull 和 offset 等类能够帮上忙的地方了

102
00:08:20,510 --> 00:08:24,020
让我们把这些变化应用到这些类 再回过头来

103
00:08:24,020 --> 00:08:29,370
看看到时网页排版的变化

104
00:08:29,370 --> 00:08:34,170
从小屏到大屏 我会把标题

105
00:08:34,170 --> 00:08:38,810
向右边推 (push) 9 个单位

106
00:08:38,810 --> 00:08:43,780
然后把描述向左边拉 (pull) 3 个单位

107
00:08:44,990 --> 00:08:50,040
那么回到我们的 HTML 页面 现在对于第 1 和第 3 行

108
00:08:50,040 --> 00:08:55,040
我会把标题推向右边 然后把描述拉向左边

109
00:08:55,040 --> 00:08:59,825
那么进入到 div 中, 对于标题的 div 我会应用

110
00:08:59,825 --> 00:09:06,050
col-sm-push-9 

111
00:09:06,050 --> 00:09:11,920
而对描述的 div 我会应用 col-sm-pull-3

112
00:09:11,920 --> 00:09:14,520
对第三行做同样的处理

113
00:09:16,640 --> 00:09:23,725
去页脚 找到装着连到我们的网页的链接的 div

114
00:09:23,725 --> 00:09:28,455
我要应用1个单位的向右偏移

115
00:09:28,455 --> 00:09:33,455
然后让它只占2个单位

116
00:09:33,455 --> 00:09:37,776
我会找到这里 然后

117
00:09:37,776 --> 00:09:43,132
把 col-xs-6 改为 col-xs-5

118
00:09:43,132 --> 00:09:49,978
然后再加上 col-xs-offset-1

119
00:09:49,978 --> 00:09:55,642
对于 col-sm 我会把它减少到 2

120
00:09:55,642 --> 00:10:01,620
做了这些 我就更新了

121
00:10:01,620 --> 00:10:07,990
我的页脚里面的链接列了。

122
00:10:07,990 --> 00:10:12,440
现在让我保存一下这些改动 看看更新的网页

123
00:10:13,950 --> 00:10:18,920
回到我们的网页 现在你看到我用了推和拉的类

124
00:10:18,920 --> 00:10:23,330
来调整这三行里面的内容的顺序

125
00:10:23,330 --> 00:10:26,905
在第一行你可以看到标题被推到了右边

126
00:10:26,905 --> 00:10:29,525
而内容则被拉到了左边

127
00:10:29,525 --> 00:10:32,015
第三行也是类似的情况

128
00:10:32,015 --> 00:10:36,735
现在你可以看到下面的这些链接已经

129
00:10:36,735 --> 00:10:41,430
通过使用偏移(offset)被推向右边一个纵列

130
00:10:42,870 --> 00:10:45,640
其他东西则没有变动

131
00:10:45,640 --> 00:10:50,600
现在 如果我将网页缩小到超小尺寸

132
00:10:50,600 --> 00:10:55,870
留意一下网页的响应

133
00:10:55,870 --> 00:10:59,510
网页的排版跟之前仍然一样

134
00:11:01,440 --> 00:11:06,510
翻下来到页脚 我可以看到我的链接

135
00:11:06,510 --> 00:11:08,250
显示为一个点列表

136
00:11:08,250 --> 00:11:12,960
我不想要这个点列表 而想要它完全靠左

137
00:11:12,960 --> 00:11:17,830
因此我会应用一个 list-unstyled 类

138
00:11:17,830 --> 00:11:23,390
到这个列表上 然后你就会留意到这里的变动

139
00:11:23,390 --> 00:11:28,725
来到这个 ul 标签的源代码 我要应用一个

140
00:11:28,725 --> 00:11:34,320
list-unstyled 类

141
00:11:34,320 --> 00:11:37,690
回到网页 你可以看到在页脚上

142
00:11:37,690 --> 00:11:41,620
链接列表不再带有点

143
00:11:42,660 --> 00:11:47,420
然后我要向你展示我们如何在网站项目中

144
00:11:47,420 --> 00:11:49,590
引入一个自定义的CSS文件

145
00:11:49,590 --> 00:11:57,200
要做到这一点 我们来到 CSS 文件夹 
在那里创建一个新的文件

146
00:11:57,200 --> 00:12:03,168
然后我们可以叫它mystyles.css

147
00:12:03,168 --> 00:12:08,792
打来这个mystyles.css文件

148
00:12:08,792 --> 00:12:13,318
我会粘贴一些CSS代码

149
00:12:13,318 --> 00:12:19,390
这些代码会应用到我们网页的某些元素上

150
00:12:19,390 --> 00:12:23,310
粘贴CSS代码 这些代码我会提供给你们

151
00:12:23,310 --> 00:12:30,220
我使用这些CSS代码来设计网页中各行的样式

152
00:12:31,560 --> 00:12:34,700
在这里 你可以看到我在页首和页尾

153
00:12:34,700 --> 00:12:40,030
都加了一些 margin 和 padding 的数值

154
00:12:40,030 --> 00:12:45,670
对于内容的行 我也添加了类似的 margin 和 padding

155
00:12:45,670 --> 00:12:47,710
此外 对于内容行

156
00:12:47,710 --> 00:12:52,620
我还设置了所有内容行的最小高度为 400 像素

157
00:12:52,620 --> 00:12:57,790
像这样 我们的网页就可以排列得更清晰

158
00:12:59,030 --> 00:13:05,280
对于页脚 我添加了一个浅灰的背景色

159
00:13:05,280 --> 00:13:12,510
这样它看起来就跟网页的其他部分不一样

160
00:13:12,510 --> 00:13:17,470
在mystyles.css文件上做了这些改动之后
我会保存它

161
00:13:17,470 --> 00:13:23,720
然后把这个CSS文件包含在我的HTML页面里

162
00:13:24,750 --> 00:13:29,690
回到HTML代码 在头部(head)

163
00:13:29,690 --> 00:13:35,050
紧跟在引入bootstrap文件的后面

164
00:13:35,050 --> 00:13:43,830
我要多加上一行来引入我们刚刚创建的CSS文件

165
00:13:43,830 --> 00:13:47,974
我会写 css/mystyle.css

166
00:13:47,974 --> 00:13:51,570
也就是我想引入的文件

167
00:13:51,570 --> 00:13:55,840
而这是一个样式表文件

168
00:13:58,410 --> 00:14:03,740
那么我就把我的自定义CSS类加入到我的项目里来了

169
00:14:03,740 --> 00:14:07,230
现在我可以把这些CSS类加到不同的行里了

170
00:14:07,230 --> 00:14:11,265
让我加上这些页首 内容行和页尾的类

171
00:14:11,265 --> 00:14:15,665
然后再看看网页有什么变化

172
00:14:15,665 --> 00:14:21,085
我在页首的行里加入了页首的格式

173
00:14:21,085 --> 00:14:24,950
然后在网页的内容部分的行里

174
00:14:24,950 --> 00:14:28,820
加入了 row-content 类

175
00:14:28,820 --> 00:14:34,430
最后 我要把页尾的格式加入到页尾的行里

176
00:14:34,430 --> 00:14:37,850
更准确的说把它应用到页尾自身

177
00:14:39,880 --> 00:14:44,160
这样我就加完了这些类了 让我们回到网页

178
00:14:44,160 --> 00:14:47,130
检查一下它是如何变化的吧

179
00:14:48,178 --> 00:14:54,920
回到网页你会发现网页排版稍微有些变化

180
00:14:54,920 --> 00:14:59,370
在页首 Jumbotron维持不变

181
00:14:59,370 --> 00:15:06,050
但是其他的行则占据了比之前多得多的屏幕空间

182
00:15:06,050 --> 00:15:10,030
这是因为我给这些行定义了最小高度

183
00:15:10,030 --> 00:15:10,570
为400像素

184
00:15:10,570 --> 00:15:15,820
所以现在这些行 每个的高度都是400像素

185
00:15:17,820 --> 00:15:23,470
而页脚现在则有了灰色的背景色

186
00:15:23,470 --> 00:15:25,110
并且在底部显示

187
00:15:26,400 --> 00:15:30,580
最后我回到 mystyles.css文件

188
00:15:30,580 --> 00:15:35,370
为Jumbotron和页脚的地址

189
00:15:35,370 --> 00:15:39,340
再加上一些自定义的类

190
00:15:39,340 --> 00:15:45,390
在代码里 你可以看到

191
00:15:45,390 --> 00:15:51,200
我给 Jumbotron 设置了适当的 padding

192
00:15:51,200 --> 00:15:55,270
此外我还要把 Jumbotron 的背景色设置为

193
00:15:55,270 --> 00:15:58,810
浅靛蓝色

194
00:15:58,810 --> 00:16:07,430
而 Jumbotron 里显示的文字则设置为米白色

195
00:16:07,430 --> 00:16:12,890
地址会出现在我们页面的页脚

196
00:16:12,890 --> 00:16:16,760
现在我要减小地址的字号

197
00:16:16,760 --> 00:16:19,330
让它比标准字号略小

198
00:16:19,330 --> 00:16:21,285
例如大概标准字号的 80% 左右

199
00:16:21,285 --> 00:16:25,963
这就是我对地址做出的改动

200
00:16:28,010 --> 00:16:33,061
让我们切回网页画面 我们可以看到

201
00:16:33,061 --> 00:16:38,329
我们的Jumbotron已经变成了浅靛蓝色

202
00:16:38,329 --> 00:16:44,800
此外 Jumbotron 中的文字则变成了米白色

203
00:16:47,020 --> 00:16:50,250
然后下来到页脚 你会看到

204
00:16:50,250 --> 00:16:55,480
地址现在显示的字号比之前稍微小一些

205
00:16:55,480 --> 00:17:01,990
那么我们在这个练习里面希望做到的改动就全部完成了

206
00:17:01,990 --> 00:17:07,550
在这个练习的结尾 我们学到了如何将纵列类

207
00:17:07,550 --> 00:17:13,700
应用到我们网页中的各种 div 里面

208
00:17:13,700 --> 00:17:18,850
此外 我们还学到了如何引入自定义的CSS类

209
00:17:18,850 --> 00:17:21,980
并且将它们应用到网页中的不同元素上

210
00:17:23,380 --> 00:17:26,170
这次练习到此结束