We are now moving to the next hands-on
exercise where we are going to begin with the web page that we
completed in the previous exercise. And we are now going to introduce
the bootstrap grid classes into it. In order to appropriately lay
out the content of the pitch. In addition, we're gonna introduce some
custom CSS classes into the webpage. So let's go ahead and then look at the
HTML code for the web page one more time. Going into our HTML code in brackets we're going to see that at
the top of the page in the head, to be have introduced the viewpoint
metatag already in previously, so this is what provides us with
the responsive behavior for our webpage. Now we are gonna go in and
apply the column classes to all the different divs inside
the body of our webpage. Moving to the header of our page
inside the body, I'm going to apply the grid column classes to the two
inner divs Inside the Jumbotron. So to do that for the first div I'm
going to apply a column class as col-xs-12. 12 col-sm-8. So this content is gonna be displayed in extra small devices it will occupy
the entire width of the screen. But for small to large screen sizes,
it is going to occupy eight columns. You also notice that I have
another div in the jumbotron. Currently, that div contains no content. Later on I am planning to introduce
a logo for our restaurant into that div. So I'm gonna leave the div empty at
the moment, but I'm gonna apply the column classes to the div so that it occupies
the remaining number of columns. To this div I'm going to apply
column classes XS 12 and SM 4 because we are left with four columns
from the small to large screen sizes, empty on the right-hand side of this row. Once we have completed this,
let's now move into the divs in the actual content of our webpage. For each one of those divs,
I have a headline and then I have the actual content. So the headline part of it I will enclose
in a smallish number of columns, but the detailed content, I will have it
occupying a larger number of columns. So I'm going to do that by applying
two different div classes for each of those columns. For extra small screen sizes, I'm going
to lay them out one on top of the other stacked, but for small to large,
I'm gonna lay them out side by side. So let's go and apply the column classes
to those inner divs in those rows there. For the div containing the headline,
I'm going to apply column xs 12 and column sm 3 in that case and
for the other div I'm going to apply the remaining columns from that. Think about how I'm going to do that,
all done, let me repeat that for
the remaining rows of. The actual content of the webpage. For the divs in the footer, I am going to have the first div
occupy three columns for the small to large string sizes,
the second div to occupy five columns. For the small to medium and large. And the last div to occupy
the remaining for columns. But for
extra small I'm gonna have the first and second divs occupy six columns each. And the third one will occupy
the entire twelve columns. And the copyright statement I'm going to
let that expand the entire twelve columns. So let me apply those column classes to
be as tips and then we'll come back and look at the completed webpage. I have now completed the changes. Let's go and have a look at the page. You can now see how
the web page is rendered. You can see that the jumbotron,
the restaurant name and the description is occupying
left eight columns. And then we have empty space here on
the right side where the logo will go in which will be part of
the exercise in the next module. Then, we see that the three
pieces of content are now laid out such that the headline occupies
three columns on the left side. And the actual long description occupies
the remaining nine columns here. Going down to that footer, now you can
see that the links occupy three columns, the address occupies five columns. And then the links our social media sites
occupies the remaining four columns here. The copyright down below here is spanning
the entire twelve columns of that row. Let us now examine the responsive
behavior of this web page. Now, taking this web page, let me
slowly shrink the web page and see how the webpage responds as
the screen size is reduced. So this for 1,280 pixels. This is the length of the screen
size that I'm using currently. I'm gonna keep shrinking the size and
you can see the changes in the layout of the webpage as
I reduce the screen size. So this is still for small screen size. So you can see the layout
is still like that, but let's go for the extra small and
see what happens. Now you can see that when I
switch from small to extra small, immediately our content
layout changes its behavior. So, now I have my description
of the restaurant and the name of the restaurant display
occupying the entire screen size. These two items now instead of
being side by side now are stacked one on top of the other. And then look at the footer. You see that the links and
address are displayed side by side. And the links to our social media
sites are displayed in a separate columns, separate row spanning
the entire screen size. The copyright remains as such. So now you can see how we have introduced
responsiveness to our web page. We can see that within the web page,
the headline and the description are all laid out in
a similar fashion in all the rows. Now I wanna make a slight
change whereby for some of the rows I want
to swap the headline and the description around specifically for
the question in the third row. So that the webpage acquires
some more interesting character. How do we go about doing that? This is where the push, pull and offset classes that we discussed
are going to come to our aid. Let's apply those changes to those
classes and then come back and see the layout of the web
page of the point. For small to large I'm
going to push the headline to the right by nine units, and pull their description
to the left by three units. So returning to our HTML page,
now for the first and third row, I'm gonna push the headline to the right,
and pull the Description to the left. So going into the divs, for
the headline div I'm going to apply col-sm-push-9and for the description I'm going
to apply col-sm pull-3. Same thing for the third row too. Going to the footer for the div that
shows the links to our webpages, I'm going to apply an offset
of one unit to the right and I'm going to led the two units. So i am going to go in here and
I would say, col-xs-6, but I will change to col-xs-5. And then I will say col-xs-offset-1. And col-sm, I'll reduce it to 2. With this I have updated
the class definitions for the links row, links column in my footer. And I'll save the changes and
let's go and look at the webpage. Returning to our webpage,
now you see how I have used the push and pull classes to swap things
around in the three drawers. In the first drawer you can see that
the headline has been pushed to right and the content has been pulled to the left. And similarly for the third row. Now you can see that the links
down below here have been pushed right by one
column using the offset. The remaining ones stay as such. Now if I shrink the webpage to the extra small size, notice that the behavior. The layout remains the same as before. Coming down to the footer I notice
that my links are being displayed as a bulleted list. I don't want the bulleted list instead
I want to be completely left so to do that I will apply a unstyled list class to that list and
then you will notice the change there. Going into the code for
this UL tag I am going to apply a class list-unstyled. Returning to your webpage you
can see now in the footer how the links are being
displayed without the bullets. Next I'm going to show you how we
can introduce a custom CSS file into our web project. To do that, go to the CSS folder and
then introduce a new file there. And then we will name it as mystyles.css. And then when the mystyles.css
file is opened, I'm going to paste in some CSS code to be applied to some of
the elements in my web page. So I'll paste in the CSS code
which I have provided for you. This CSS code, I am making use to
style my various rows in the web page. In here, you can see that for
my header and my footer I am giving some margin and
padding values, and then similarly for the content rows I
am giving some margin and adding values. In addition, from my content rows, I am making every content row to
be a minimum height of 400 pixels. So, this way, our webpage is laid
out in a lot more cleaner fashion. For the footer, I will apply a background
color of a light gray color there so that it looks a bit more different from
the remaining rows of my web page. After making the changes to the
mystyles.css file, I'm gonna save that, and then now I need to include
the CSS file into my HTML page. Moving back to the html code,
in the head right after the import of
the bootstrap css files, I am going to add in one more to import
the CSS file that I've just created. So I will say css/mystyles.css. That's the page that I want to input, and this is a style sheet. So, with that I have included my
custom CSS classes into my project. Now I can apply those CSS
classes to the different rows. So, let me go ahead and apply those
to the header, the content rows. And the footer and then we'll
see how the webpage has changed. So I have applied the header
formatting to the row in the header. Then I have applied that
content row content class to the rows in the content
part of our webpage. And finally I'm ready to apply the footer
content to the row inside my footer. Or rather I will apply that
directly to the footer itself. So now that I have completed applying
these classes, let me go back and check that web page and
see how it has changed. Returning to your webpage now you can see
the webpage layout has changed slightly. The jumbotron remains
as such in the header. Then, but the remaining rules are now
occupying a lot more space on the screen. So since I have declared that the minimum
width each row should occupy would be 400 pixels. So the height of each of these
rows is now set to 400 pixels. The footer has now acquired
the gray background color and is displayed at the bottom. Finally, I'll go into
my styles.css file and add in a couple of more custom classes for
the jumbotron and the address that I'm using in the footer. So adding in the code, you see that for the jumbotron, I am setting the padding
for the jumbotron appropriately. And also I am going to set
the background of the jumbotron to be a light indigo color. And the text to be displayed would be
in a off-white color in the jumbotron. The address which appears
in the footer of my page. Now, I'm going to reduce
the font size of my address to be slightly smaller
than the standard size. It'll be about 80%, so that is the modification that I
am applying here to that address. Switching back to the view of
our web page, we now notice that our jumbotron has acquired
a light indigo color, and in addition the lettering is now in
off-white color in the jumbotron. Going down to the footer,
you will see that our address is now displayed in a slightly
smaller font size than before. This completes the modifications that we
are going to affect in this exercise. At the end of this exercise, we have
learned how to apply the column classes to the various divs inside
of rows in our webpage. In addition, we have also seen how we
can introduce custom CSS classes and then apply them to various
elements in our webpage. This concludes this exercise.