1
00:00:04,420 --> 00:00:07,980
In the discussion on responsive design,

2
00:00:07,980 --> 00:00:13,471
I had briefly alluded to the grid
system and the fact that many for

3
00:00:13,471 --> 00:00:19,030
intent UI frameworks support
some form of a grid system.

4
00:00:19,030 --> 00:00:23,030
Bootstrap, in particular,
supports the bootstrap grid system.

5
00:00:23,030 --> 00:00:28,118
In this lecture we are going
to examine the Bootstrap grid

6
00:00:28,118 --> 00:00:33,100
system in more detail and
understand how we can leverage

7
00:00:33,100 --> 00:00:38,412
a Bootstrap grid system to
design responsive bootstraps.

8
00:00:39,670 --> 00:00:44,070
When we configured our web
project to use bootstrap,

9
00:00:44,070 --> 00:00:50,040
one of the first set of statements
that we included in our

10
00:00:50,040 --> 00:00:55,800
html page was the meta
tag with the viewport.

11
00:00:55,800 --> 00:01:03,000
The viewport enables our webpage to be
able to identify the width of the device,

12
00:01:03,000 --> 00:01:07,580
and then appropriately adapt itself
to the width of that device.

13
00:01:07,580 --> 00:01:10,870
So using this meta tag that we have here,

14
00:01:10,870 --> 00:01:16,260
we have specified that the width
should be equal to the device-width.

15
00:01:16,260 --> 00:01:21,750
So essentially, we are occupying
the entire device width as a return by

16
00:01:21,750 --> 00:01:26,880
our device from which we
are accessing this webpage.

17
00:01:26,880 --> 00:01:31,280
So if you're accessing the webpage
from a mobile phone or

18
00:01:31,280 --> 00:01:38,500
from a tablet the device would match
the screen width of our device.

19
00:01:39,840 --> 00:01:44,730
For laptops and desktops,
we know that our browsers

20
00:01:44,730 --> 00:01:49,450
can be any size smaller than
the entire screen size.

21
00:01:49,450 --> 00:01:53,910
So our browser window can be smaller than
the actual screen size of the device.

22
00:01:53,910 --> 00:01:59,180
So in those circumstances the device
will be set equal to the width

23
00:01:59,180 --> 00:02:04,560
of the browser window that is
being used to access our website.

24
00:02:06,200 --> 00:02:12,820
So the viewport meta tag is used to be
able to identify and set the device-width,

25
00:02:12,820 --> 00:02:17,000
so that the content is appropriately
rendered with this width in mind.

26
00:02:18,160 --> 00:02:22,590
Designing websites to be responsive
to the size of the viewport,

27
00:02:22,590 --> 00:02:26,100
requires us to use the grid system.

28
00:02:26,100 --> 00:02:29,430
In particular in this case,
the Bootstrap grid system.

29
00:02:29,430 --> 00:02:32,860
We will examine this in more detail next.

30
00:02:33,920 --> 00:02:37,276
The Bootstrap grid itself is
designed to be responsive,

31
00:02:37,276 --> 00:02:41,620
mobile first, and fluid.

32
00:02:41,620 --> 00:02:44,170
So these attributes help

33
00:02:44,170 --> 00:02:48,120
us to design responsive websites
using the Bootstrap grid system.

34
00:02:48,120 --> 00:02:54,580
We will examine how we go about
doing this in the next few slides.

35
00:02:54,580 --> 00:02:59,470
And then following that we will have
an exercise where we will examine this

36
00:02:59,470 --> 00:03:01,240
practically in more detail.

37
00:03:02,400 --> 00:03:07,050
We have already seen the container
class in Bootstrap in

38
00:03:07,050 --> 00:03:11,340
the previous exercise and the discussion
where we introduced Bootstrap to you.

39
00:03:12,530 --> 00:03:19,210
The container class is used to
enclose the content of our webpage.

40
00:03:19,210 --> 00:03:25,260
So the container class enables us to
define the width that our content is going

41
00:03:25,260 --> 00:03:30,410
to occupy on our webpage,
when it is rendered in on the screen,

42
00:03:31,460 --> 00:03:37,770
so once you specify the container
class depending on the screen size.

43
00:03:37,770 --> 00:03:44,050
It'll automatically fix itself to
an appropriate size to match the screen

44
00:03:44,050 --> 00:03:50,040
size or the browser window size through
which you are accessing your website.

45
00:03:50,040 --> 00:03:56,020
Inside the container, we saw that we would
divide our content into multiple rows.

46
00:03:57,210 --> 00:04:01,999
Rows themselves are going to occupy
the entire width of the container.

47
00:04:03,100 --> 00:04:08,360
So the row will span the entire
width of the container in this case,

48
00:04:08,360 --> 00:04:09,950
as shown in the picture here.

49
00:04:11,890 --> 00:04:19,730
Inside each row, Bootstrap divides
the row into 12 equal sized columns.

50
00:04:19,730 --> 00:04:24,080
So this is where the Bootstrap grid
system structure comes into place.

51
00:04:24,080 --> 00:04:29,090
So when you divide your row
into 12 equal columns then,

52
00:04:29,090 --> 00:04:33,340
you can take your content,
and then lay it out

53
00:04:33,340 --> 00:04:38,220
to occupy any number of these
columns within each row.

54
00:04:39,530 --> 00:04:44,310
So for example, you could lay out
one piece of content to occupy

55
00:04:44,310 --> 00:04:49,390
the first seven columns of this group.

56
00:04:49,390 --> 00:04:53,840
So to do that we will specify it
as shown in the picture there.

57
00:04:53,840 --> 00:04:57,403
We will specify the class as col-sm-5.

58
00:04:57,403 --> 00:05:01,260
I will explain the details
of that subsequently.

59
00:05:01,260 --> 00:05:05,610
But for the moment you can see how we
are able to specify a piece of content to

60
00:05:05,610 --> 00:05:07,570
occupy five columns.

61
00:05:07,570 --> 00:05:11,330
Then we could have another piece of
content occupying the remaining seven

62
00:05:11,330 --> 00:05:13,310
columns in the strip.

63
00:05:13,310 --> 00:05:13,920
So this way,

64
00:05:13,920 --> 00:05:18,330
these two pieces of content are going to
be laid out on the screen side by side.

65
00:05:20,040 --> 00:05:24,670
Between these two pieces of content
there will be a small white margin left,

66
00:05:24,670 --> 00:05:25,740
what we call as a gutter.

67
00:05:27,070 --> 00:05:32,380
We look at how Bootstrap configures
all these different parameters for

68
00:05:33,530 --> 00:05:34,950
laying out the content.

69
00:05:37,710 --> 00:05:43,420
Bootstrap itself supplies
four different classes

70
00:05:43,420 --> 00:05:48,190
to target four different
groups of screen sizes.

71
00:05:48,190 --> 00:05:54,050
Extra-small to target the extra-small
screen sizes, typically mobile phones.

72
00:05:54,050 --> 00:05:57,820
Small for smaller screen sizes,

73
00:05:57,820 --> 00:06:01,670
larger than mobile phones, but
smaller than say, laptops.

74
00:06:01,670 --> 00:06:04,450
So this would be the tablet category,
there.

75
00:06:04,450 --> 00:06:13,530
Then we have medium, md, which typically
targets the laptop scale devices.

76
00:06:13,530 --> 00:06:17,890
And then finally, we have large,
which targets large screens,

77
00:06:17,890 --> 00:06:21,440
screens that are greater
than 1200 pixels in width.

78
00:06:23,570 --> 00:06:32,138
In addition, Bootstrap provides
us with these column classes,

79
00:06:32,138 --> 00:06:36,033
col-sm- whatever number,

80
00:06:36,033 --> 00:06:40,580
col-xs-, and md- and lg-.

81
00:06:40,580 --> 00:06:45,370
Correspondingly, these targetting
the extra small, small, medium, and

82
00:06:45,370 --> 00:06:46,710
large screen sizes.

83
00:06:48,350 --> 00:06:53,280
Now, when you layout any piece of content,
you can specify how many of those

84
00:06:53,280 --> 00:06:58,290
12 columns within a row this piece
of content is going to occupy.

85
00:06:58,290 --> 00:07:01,550
So, that is why,
when you saw the example earlier,

86
00:07:01,550 --> 00:07:06,580
you saw that I specified a .col-sm-5,
meaning that for

87
00:07:06,580 --> 00:07:12,470
small screen sizes, this piece of
content is gonna occupy five columns.

88
00:07:13,970 --> 00:07:21,730
Now, looking at the details of all
these sizes, when you examine this,

89
00:07:21,730 --> 00:07:27,110
in this table here, we can see that
we have four groups of screen sizes.

90
00:07:27,110 --> 00:07:31,530
Extra small for
any screen that is less than 768 pixels.

91
00:07:31,530 --> 00:07:36,640
Small for screen sizes between 768 and
992 pixels.

92
00:07:36,640 --> 00:07:40,870
Medium for greater than 992 but
less than 1200 pixels.

93
00:07:40,870 --> 00:07:44,840
And larger screens would be
greater than 1200 pixels.

94
00:07:44,840 --> 00:07:49,650
Correspondingly to four different
categories of devices that each of these

95
00:07:49,650 --> 00:07:50,520
are targeting.

96
00:07:51,600 --> 00:07:55,860
Now the grid behavior itself for
extra small screens,

97
00:07:55,860 --> 00:08:01,760
everything is laid out in single
stacked be one below the other.

98
00:08:03,460 --> 00:08:08,692
All the rows, and
within the rows you can lay out columns

99
00:08:08,692 --> 00:08:13,270
appropriately for
small to large screen sizes.

100
00:08:13,270 --> 00:08:18,760
It will start collapsed first, but
as you target the larger screen sizes,

101
00:08:18,760 --> 00:08:24,282
these will be laid out appropriately as
specified by you using the column classes.

102
00:08:24,282 --> 00:08:26,330
The will work also.

103
00:08:26,330 --> 00:08:30,690
You can see that depending
on the screen size,

104
00:08:30,690 --> 00:08:34,740
the container will be appropriately fixed.

105
00:08:34,740 --> 00:08:38,250
So for small screen sizes,

106
00:08:38,250 --> 00:08:43,240
it is 750 pixel, all the way up to large
screen sizes, which is 1170 pixels,

107
00:08:43,240 --> 00:08:50,410
out of the 1200 pixels a mode that
the width of the screen is sized to be.

108
00:08:53,160 --> 00:08:58,550
In addition, for
any one of these screen categories

109
00:08:58,550 --> 00:09:02,990
the rule is always divided
into 12 equal columns.

110
00:09:04,970 --> 00:09:09,770
The gutter width, again, as I've said
between two laid-out pieces of content

111
00:09:09,770 --> 00:09:12,970
there will be some whitespace left over,
which we call as a gutter.

112
00:09:12,970 --> 00:09:16,140
The gutters width will
always be 30 pixels.

113
00:09:16,140 --> 00:09:19,680
So if you lay out two pieces of content,
the first one occupying five and

114
00:09:19,680 --> 00:09:23,930
the second one occupying seven columns
between these two pieces of content

115
00:09:23,930 --> 00:09:28,470
there'll be 30 pixel gutter
left over as white space.

116
00:09:28,470 --> 00:09:32,860
So that way on the screen you will
see these two piece of content

117
00:09:32,860 --> 00:09:36,636
sufficiently separated from each other,
and clearly laid out.

118
00:09:38,490 --> 00:09:44,730
The column width itself is calculated
depending on the size of the screen.

119
00:09:44,730 --> 00:09:48,393
So for example, for small screens,
as you see the column,

120
00:09:48,393 --> 00:09:52,130
each column will occupy 62 pixels,
all the way up to larger

121
00:09:52,130 --> 00:09:56,405
screens where each column will
occupy at least 97 pixels or above.

122
00:09:58,528 --> 00:10:03,143
When you lay out content on the screen,
you can lay out content to be

123
00:10:03,143 --> 00:10:09,260
displayed on the screen in different ways,
depending on the screen size.

124
00:10:09,260 --> 00:10:13,470
In the example that is
shown on the screen here,

125
00:10:13,470 --> 00:10:16,870
you can see that for
extra small screen sizes,

126
00:10:16,870 --> 00:10:21,570
I have laid out the two pieces of content
to be stacked one on top of the other.

127
00:10:22,830 --> 00:10:26,715
This I am specifying by
specifying the classes as

128
00:10:26,715 --> 00:10:31,350
col-xs-12 for both the pieces of content.

129
00:10:31,350 --> 00:10:34,540
But for small to large screen sizes

130
00:10:34,540 --> 00:10:39,870
I want this content to be laid out
side by side within a single row.

131
00:10:39,870 --> 00:10:45,550
Now this is specified, as you see on
the right hand side of the picture above,

132
00:10:45,550 --> 00:10:51,680
you can see that for the first one,
I specified the columns sm-5, meaning that

133
00:10:51,680 --> 00:10:56,950
the first piece of content will occupy
five columns, the left most five columns.

134
00:10:56,950 --> 00:11:00,200
And the remaining piece of content
will occupy seven columns.

135
00:11:00,200 --> 00:11:04,560
That's why column sm-7
the seven columns to the right

136
00:11:04,560 --> 00:11:06,140
of the first piece of content.

137
00:11:06,140 --> 00:11:11,160
So this way, these two pieces of content
will be laid out side-by-side on

138
00:11:11,160 --> 00:11:15,130
any screen sizes, small, medium, or large.

139
00:11:15,130 --> 00:11:21,280
You may be wondering why I did not
explicitly specify for medium and large.

140
00:11:21,280 --> 00:11:25,925
Bootstrap, by default,
if you do not specify the layout for

141
00:11:25,925 --> 00:11:31,024
some of the categories,
then the earlier one that is specified for

142
00:11:31,024 --> 00:11:36,871
the smaller screen size will be
automatically applied for larger.

143
00:11:36,871 --> 00:11:41,660
So in this case, when I say col-sm-5,
which means that for nd and

144
00:11:41,660 --> 00:11:45,609
lg also, it's the same
specification that will hold,

145
00:11:45,609 --> 00:11:50,229
meaning that the one piece of
content will occupy five columns and

146
00:11:50,229 --> 00:11:54,920
the second one will occupy
the remaining seven columns.

147
00:11:54,920 --> 00:11:59,000
Now, this is the standard way,
if you don't specify any further,

148
00:11:59,000 --> 00:12:01,920
this is how the content will
be laid out on the screen.

149
00:12:03,850 --> 00:12:09,815
Bootstrap also provides us with an
additional set of classes called pull and

150
00:12:09,815 --> 00:12:11,345
push classes.

151
00:12:11,345 --> 00:12:12,135
Using the pull and

152
00:12:12,135 --> 00:12:17,610
push classes, you can override
the standard behavior of the layout.

153
00:12:17,610 --> 00:12:23,210
So in this example, you can see that for

154
00:12:23,210 --> 00:12:29,460
screen sizes extra small, we are laying
out the content one on top of the other.

155
00:12:29,460 --> 00:12:31,730
The red one on top of the green one.

156
00:12:32,810 --> 00:12:37,550
But for small, medium, and large screen
sizes, the green one will be laid out to

157
00:12:37,550 --> 00:12:40,720
the left side, and the red one will
be laid out to the right side.

158
00:12:40,720 --> 00:12:44,880
This behavior is specified by
using the push and pull classes.

159
00:12:44,880 --> 00:12:48,210
So as you can see for the red content,

160
00:12:48,210 --> 00:12:53,120
I have specified the column sm-push-7,

161
00:12:53,120 --> 00:12:58,510
meaning that this piece of content
will be pushed right by seven columns.

162
00:12:58,510 --> 00:13:03,290
So essentially, occupying the last
five columns in that row.

163
00:13:03,290 --> 00:13:10,720
The second piece of content I have
specified it as column-sm-pull-7,

164
00:13:10,720 --> 00:13:16,200
meaning that this piece of content
will be pulled lesswards by 7 units.

165
00:13:16,200 --> 00:13:20,704
So this way you can easily
customize how the content is

166
00:13:20,704 --> 00:13:24,720
going to be laid out on
different screen sizes.

167
00:13:26,846 --> 00:13:30,444
In addition to Push and
Pull, we also have yet

168
00:13:30,444 --> 00:13:34,910
another Column class type,
call this offset.

169
00:13:34,910 --> 00:13:39,960
Using offset, we can specify that
a piece of content should be

170
00:13:39,960 --> 00:13:43,970
offset to the right by
a certain number of columns.

171
00:13:43,970 --> 00:13:46,890
In this example I'm specifying

172
00:13:47,900 --> 00:13:52,270
that the piece of content
should be offset by one column.

173
00:13:52,270 --> 00:13:56,360
Meaning that this piece of content
will be laid out starting at column

174
00:13:56,360 --> 00:13:59,210
number 2 rather than column number 1.

175
00:13:59,210 --> 00:14:02,090
If you don't specify
the offset by default,

176
00:14:02,090 --> 00:14:07,900
the content will be laid out
starting from column number 1.

177
00:14:07,900 --> 00:14:12,336
Now, the other piece of content
will occupy the remaining seven

178
00:14:12,336 --> 00:14:13,822
columns in this row.

179
00:14:16,550 --> 00:14:25,410
One last piece of modification that we're
gonna see is the use of nested columns.

180
00:14:25,410 --> 00:14:27,840
Now, when we laid out our content

181
00:14:28,900 --> 00:14:32,970
to occupy two different number
of columns on the screen,

182
00:14:32,970 --> 00:14:38,870
then inside any one of those pieces of
content, I can again go and insert a row.

183
00:14:38,870 --> 00:14:43,400
When I do that inside the column,
that particular row will span exactly

184
00:14:43,400 --> 00:14:47,100
the number of columns that the piece
of content is supposed to span.

185
00:14:47,100 --> 00:14:51,565
So in this example I see that
the right hand side content is

186
00:14:51,565 --> 00:14:56,445
supposed to suspend seven columns,
so inside the first row,

187
00:14:56,445 --> 00:15:00,525
it is occupying the rightmost
seven columns in there.

188
00:15:00,525 --> 00:15:04,850
Inside that piece of content,
I have introduced another row.

189
00:15:04,850 --> 00:15:10,400
When I introduce this row, Bootstrap again
will give me 12 columns inside that row.

190
00:15:11,590 --> 00:15:17,460
So meaning that this content that is
inside this content that is occupying

191
00:15:17,460 --> 00:15:23,770
the seven right-most columns, they can now
again be subdivided into 7 equal columns.

192
00:15:23,770 --> 00:15:28,960
And you can then specify content
to occupy any number of those

193
00:15:28,960 --> 00:15:34,030
12 columns inside the row which is
inside another piece of content which is

194
00:15:34,030 --> 00:15:39,470
occupying a certain number
of columns in an outer row.

195
00:15:39,470 --> 00:15:44,170
So this kind of nesting gives
us a lot of flexibility

196
00:15:44,170 --> 00:15:48,989
in laying out contents for
screens of different screen sizes.

197
00:15:50,570 --> 00:15:55,990
So now we have seen how
Bootstrap's grid system allows us

198
00:15:55,990 --> 00:15:59,900
a lot of flexibility in
laying out our screens and

199
00:15:59,900 --> 00:16:05,220
specifying how the content should be
laid out for different screen sizes.

200
00:16:06,690 --> 00:16:11,520
So now we will move on to
our next hands-on exercise,

201
00:16:11,520 --> 00:16:16,500
where we will start with
the exercise that we worked on

202
00:16:16,500 --> 00:16:22,940
in the previous set of lessons, and
we'll continue modifying that webpage,

203
00:16:22,940 --> 00:16:26,469
applying Bootstrap's column classes

204
00:16:28,680 --> 00:16:34,310
to properly layout the contents in that

205
00:16:34,310 --> 00:16:39,210
page in addition,
we will also look at how we can introduce

206
00:16:39,210 --> 00:16:43,921
our own custom CSS
classes into the webpage.