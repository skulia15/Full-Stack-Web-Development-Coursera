In the discussion on responsive design, I had briefly alluded to the grid
system and the fact that many for intent UI frameworks support
some form of a grid system. Bootstrap, in particular,
supports the bootstrap grid system. In this lecture we are going
to examine the Bootstrap grid system in more detail and
understand how we can leverage a Bootstrap grid system to
design responsive bootstraps. When we configured our web
project to use bootstrap, one of the first set of statements
that we included in our html page was the meta
tag with the viewport. The viewport enables our webpage to be
able to identify the width of the device, and then appropriately adapt itself
to the width of that device. So using this meta tag that we have here, we have specified that the width
should be equal to the device-width. So essentially, we are occupying
the entire device width as a return by our device from which we
are accessing this webpage. So if you're accessing the webpage
from a mobile phone or from a tablet the device would match
the screen width of our device. For laptops and desktops,
we know that our browsers can be any size smaller than
the entire screen size. So our browser window can be smaller than
the actual screen size of the device. So in those circumstances the device
will be set equal to the width of the browser window that is
being used to access our website. So the viewport meta tag is used to be
able to identify and set the device-width, so that the content is appropriately
rendered with this width in mind. Designing websites to be responsive
to the size of the viewport, requires us to use the grid system. In particular in this case,
the Bootstrap grid system. We will examine this in more detail next. The Bootstrap grid itself is
designed to be responsive, mobile first, and fluid. So these attributes help us to design responsive websites
using the Bootstrap grid system. We will examine how we go about
doing this in the next few slides. And then following that we will have
an exercise where we will examine this practically in more detail. We have already seen the container
class in Bootstrap in the previous exercise and the discussion
where we introduced Bootstrap to you. The container class is used to
enclose the content of our webpage. So the container class enables us to
define the width that our content is going to occupy on our webpage,
when it is rendered in on the screen, so once you specify the container
class depending on the screen size. It'll automatically fix itself to
an appropriate size to match the screen size or the browser window size through
which you are accessing your website. Inside the container, we saw that we would
divide our content into multiple rows. Rows themselves are going to occupy
the entire width of the container. So the row will span the entire
width of the container in this case, as shown in the picture here. Inside each row, Bootstrap divides
the row into 12 equal sized columns. So this is where the Bootstrap grid
system structure comes into place. So when you divide your row
into 12 equal columns then, you can take your content,
and then lay it out to occupy any number of these
columns within each row. So for example, you could lay out
one piece of content to occupy the first seven columns of this group. So to do that we will specify it
as shown in the picture there. We will specify the class as col-sm-5. I will explain the details
of that subsequently. But for the moment you can see how we
are able to specify a piece of content to occupy five columns. Then we could have another piece of
content occupying the remaining seven columns in the strip. So this way, these two pieces of content are going to
be laid out on the screen side by side. Between these two pieces of content
there will be a small white margin left, what we call as a gutter. We look at how Bootstrap configures
all these different parameters for laying out the content. Bootstrap itself supplies
four different classes to target four different
groups of screen sizes. Extra-small to target the extra-small
screen sizes, typically mobile phones. Small for smaller screen sizes, larger than mobile phones, but
smaller than say, laptops. So this would be the tablet category,
there. Then we have medium, md, which typically
targets the laptop scale devices. And then finally, we have large,
which targets large screens, screens that are greater
than 1200 pixels in width. In addition, Bootstrap provides
us with these column classes, col-sm- whatever number, col-xs-, and md- and lg-. Correspondingly, these targetting
the extra small, small, medium, and large screen sizes. Now, when you layout any piece of content,
you can specify how many of those 12 columns within a row this piece
of content is going to occupy. So, that is why,
when you saw the example earlier, you saw that I specified a .col-sm-5,
meaning that for small screen sizes, this piece of
content is gonna occupy five columns. Now, looking at the details of all
these sizes, when you examine this, in this table here, we can see that
we have four groups of screen sizes. Extra small for
any screen that is less than 768 pixels. Small for screen sizes between 768 and
992 pixels. Medium for greater than 992 but
less than 1200 pixels. And larger screens would be
greater than 1200 pixels. Correspondingly to four different
categories of devices that each of these are targeting. Now the grid behavior itself for
extra small screens, everything is laid out in single
stacked be one below the other. All the rows, and
within the rows you can lay out columns appropriately for
small to large screen sizes. It will start collapsed first, but
as you target the larger screen sizes, these will be laid out appropriately as
specified by you using the column classes. The will work also. You can see that depending
on the screen size, the container will be appropriately fixed. So for small screen sizes, it is 750 pixel, all the way up to large
screen sizes, which is 1170 pixels, out of the 1200 pixels a mode that
the width of the screen is sized to be. In addition, for
any one of these screen categories the rule is always divided
into 12 equal columns. The gutter width, again, as I've said
between two laid-out pieces of content there will be some whitespace left over,
which we call as a gutter. The gutters width will
always be 30 pixels. So if you lay out two pieces of content,
the first one occupying five and the second one occupying seven columns
between these two pieces of content there'll be 30 pixel gutter
left over as white space. So that way on the screen you will
see these two piece of content sufficiently separated from each other,
and clearly laid out. The column width itself is calculated
depending on the size of the screen. So for example, for small screens,
as you see the column, each column will occupy 62 pixels,
all the way up to larger screens where each column will
occupy at least 97 pixels or above. When you lay out content on the screen,
you can lay out content to be displayed on the screen in different ways,
depending on the screen size. In the example that is
shown on the screen here, you can see that for
extra small screen sizes, I have laid out the two pieces of content
to be stacked one on top of the other. This I am specifying by
specifying the classes as col-xs-12 for both the pieces of content. But for small to large screen sizes I want this content to be laid out
side by side within a single row. Now this is specified, as you see on
the right hand side of the picture above, you can see that for the first one,
I specified the columns sm-5, meaning that the first piece of content will occupy
five columns, the left most five columns. And the remaining piece of content
will occupy seven columns. That's why column sm-7
the seven columns to the right of the first piece of content. So this way, these two pieces of content
will be laid out side-by-side on any screen sizes, small, medium, or large. You may be wondering why I did not
explicitly specify for medium and large. Bootstrap, by default,
if you do not specify the layout for some of the categories,
then the earlier one that is specified for the smaller screen size will be
automatically applied for larger. So in this case, when I say col-sm-5,
which means that for nd and lg also, it's the same
specification that will hold, meaning that the one piece of
content will occupy five columns and the second one will occupy
the remaining seven columns. Now, this is the standard way,
if you don't specify any further, this is how the content will
be laid out on the screen. Bootstrap also provides us with an
additional set of classes called pull and push classes. Using the pull and push classes, you can override
the standard behavior of the layout. So in this example, you can see that for screen sizes extra small, we are laying
out the content one on top of the other. The red one on top of the green one. But for small, medium, and large screen
sizes, the green one will be laid out to the left side, and the red one will
be laid out to the right side. This behavior is specified by
using the push and pull classes. So as you can see for the red content, I have specified the column sm-push-7, meaning that this piece of content
will be pushed right by seven columns. So essentially, occupying the last
five columns in that row. The second piece of content I have
specified it as column-sm-pull-7, meaning that this piece of content
will be pulled lesswards by 7 units. So this way you can easily
customize how the content is going to be laid out on
different screen sizes. In addition to Push and
Pull, we also have yet another Column class type,
call this offset. Using offset, we can specify that
a piece of content should be offset to the right by
a certain number of columns. In this example I'm specifying that the piece of content
should be offset by one column. Meaning that this piece of content
will be laid out starting at column number 2 rather than column number 1. If you don't specify
the offset by default, the content will be laid out
starting from column number 1. Now, the other piece of content
will occupy the remaining seven columns in this row. One last piece of modification that we're
gonna see is the use of nested columns. Now, when we laid out our content to occupy two different number
of columns on the screen, then inside any one of those pieces of
content, I can again go and insert a row. When I do that inside the column,
that particular row will span exactly the number of columns that the piece
of content is supposed to span. So in this example I see that
the right hand side content is supposed to suspend seven columns,
so inside the first row, it is occupying the rightmost
seven columns in there. Inside that piece of content,
I have introduced another row. When I introduce this row, Bootstrap again
will give me 12 columns inside that row. So meaning that this content that is
inside this content that is occupying the seven right-most columns, they can now
again be subdivided into 7 equal columns. And you can then specify content
to occupy any number of those 12 columns inside the row which is
inside another piece of content which is occupying a certain number
of columns in an outer row. So this kind of nesting gives
us a lot of flexibility in laying out contents for
screens of different screen sizes. So now we have seen how
Bootstrap's grid system allows us a lot of flexibility in
laying out our screens and specifying how the content should be
laid out for different screen sizes. So now we will move on to
our next hands-on exercise, where we will start with
the exercise that we worked on in the previous set of lessons, and
we'll continue modifying that webpage, applying Bootstrap's column classes to properly layout the contents in that page in addition,
we will also look at how we can introduce our own custom CSS
classes into the webpage.