在响应式设计的讨论中 我们提到过网格系统 我说过 许多前端 UI 框架都支持
一定形式的网格系统 而 Bootstrap 支持的网格系统
就叫 Bootstrap 网格系统 在这节课里 我们将详细地
学习 Bootstrap 网格系统 并了解如何应用 Bootstrap 网格系统 来设计响应式网站 当我们配置网页项目以使用 Bootstrap 时 首先需要加入 HTML 的是设置了 name="viewport" 的 meta 标签 这个标签将使我们的网页
能够识别设备的宽度 从而能让我们的网页
进行相应的调整以适应设备 在这个栗子里 我还设置了
content="width=device-width" 这意味着我将我们的页面宽度
设置为了和移动设备的宽度一样 也就是说无论我们用什么移动设备
来浏览我们的网页 我们的网页都能占据那个
移动设备的整个屏幕 比如 如果通过手机或平板电脑
访问我们的页面的话 我们的页面将会相应地占据
我们所用的手机或平板的屏幕 对于笔记本和台式电脑
由于浏览器的窗口 可以调整得任意小 所以浏览器的窗口可以小于
任一移动设备的尺寸 此时 device-width 这项属性将会设置成 当前浏览器窗口的宽度 所以设置了 viewport 的 meta 标签
可以用于识别和设置 device-width 从而能使我们网页的内容以
正确的宽度来渲染 而若想设计对 viewport【视口】
尺寸响应的网站 我们就需要使用网格系统 而对我们来说 要用的就是
Bootstrap 网格系统 我们接下来会进行更详细的介绍 Bootstrap 网格系统本身就是一套 响应式的 移动设备优先的
流式栅格系统 这些特性使我们能够 使用 Bootstrap 网格系统来
设计响应式网站 我们马上就会学习如何使用它 然后在那之后 我们会用一个练习以
对之进行更详细地学习 在之前的练习和讨论中 我们已经了解了 Bootstrap 中的
container 这个东西了 container 类用来封装网页中的内容 它让我们能够定义屏幕渲染时 内容在网页中所占的宽度 总之 当你定义好这个 meta 后 你的 container 就能够基于屏幕大小 来调整它自己的大小了 然后在 container 里面
会分成若干的 row row 这个东西会占满整个 container 如图所示 然后在每个 row 里面 又会有 12 个等分的 col 而这就是 Bootstrap 的网格系统了 当你把东西放在这个网格系统中时
你可以让它占据一行 12 个 column 中的 任意多个 column 比如说 你可以让一个东西 占据这一行的前七个 column
也就是前七列 如图所示则是占据了前五列 我用了 class="col-sm-5" 这个类及同一系列类的具体用法
我会在后面进行详细说明 不过从直观上来说
那个 col 和 5 都是 比较好理解的 然后如果我想让另一个东西 占据剩下 7 列的时候 我再用 class="col-sm-7" 即可 做完这些后 你可以看到
这两个东西并排地靠在一起 不过它们之间还是
有一个小小的间隙 我们管那个叫 gutter 对于应用 Bootstrap 网格系统的细节 我们接下来就会说明 首先要明确的是
Bootstrap 从总体上而言 有四个"类"特别重要
它们对应着四种不同的屏幕大小 其一为 xs, 也就是 extra small【"超小"】
这一"类"通常用于手机 其二为 sm, 也就是 small【"小"】 它一般用于屏幕大小大概在
手机屏幕大小和笔记本电脑屏幕大小之间 的那些设备上 其三为 md, 也就是 medium【"中等大小"】
一般就用于笔记本电脑的感觉 其四为 lg, 也就是 large 了【"大"】
顾名思义 就是用在大屏幕上的 如果要定量的话 就是屏幕宽度
大于 1200 像素的屏幕 这四种"类"会和其它的类组合起来使用
使用的场合在刚刚进行了说明 所以我猜你现在知道 col-sm-5 之类的
是什么意思了 就是当屏幕大小处于 sm 时
这个东西将占领 5 个 column col-xs-*, col-md-*, col-lg-*
等等等等 都是同理的 其中 * 处要用一个小于 12 的数字代替
以表明这个东西在特定的屏幕大小下 将占据 12 列中的多少列 比如如果我对同一个东西
同时设置了 col-xs-12 和 col-sm-5 的话 意味着在 xs 的屏幕大小下
这个东西将占据所有 12 列 而在 sm 的屏幕大小下
就只占据 5 列 这里有张表格可以让你了解到
这四个"类"的一些细节 其中 xs 代表着任何屏幕宽度小于
768 像素的屏幕 sm 则是 768 ~ 992 md 为 992 ~ 1200 lg 则代表着任何屏幕宽度
大于 1200 像素的屏幕 显然 每一个屏幕都会归属到 这四个"类"中的一个 然后来看看 Grid behavior【"排列行为"】 在 xs 下 所有东西都是 竖着一直排下来的 当然 每个 row 里面 column的行为
是不会改变的 而从 sm 开始 有些在 xs 里面
被折叠的内容就会展开 你可以通过指定 合适的 column 类来定制这些内容 container 在不同的屏幕大小下 也有着不同的表现 在 sm 屏幕大小下 container 的宽度 将会一直是 750 像素
在 lg 屏幕 则将会一直是 1170 像素 不要忘了 lg 是指屏幕宽度
不小于 1200 像素的屏幕 不过无论 container 的
实际宽度为多少 其内部的每个 row 都是等分成
12 个 column 的 而对于 gutter, 也就是每个 row 中 相邻两块内容之间的那个空隙 将总会是 30 像素 比如如果你现在在一个 row 里面
放了两块内容 A 和 B 其中 A 占了 5 列而 B 占了 7列 那么在 A 和 B 之间就会有一个
30 像素大小的空隙 这个空隙就叫 gutter
这样一来, A 和 B 两块内容就能 比较清晰地区分开彼此 对于 column 的宽度 则是基于
当前屏幕宽度计算得到的 比如说对于 sm 屏幕 每一列会大概占 62 像素
而对于 lg 屏幕的话 则会大概占 97 像素 而正如我提到过的 我们可以针对
不同的屏幕大小来 定制不同的排列样式 现在我们展示的这个栗子里 我们对两块内容 A 和 B 进行了一些设置
以使它们在 xs 大小下 将会上下排列 同时在 sm 屏幕
或更大的屏幕下时 将会左右排列 我是通过对 A 和 B 分别设置了 class="col-xs-12" 以使它们在
xs 屏幕下能够上下排列 而如果此时我想让它们在 sm 或更大的屏幕下 像右边这张图这样左右排列的话 只需再对 A 设置 col-sm-5 和对 B 设置 col-sm-7 即可 其中 sm-5 意味着 A 将会在
sm 屏幕下占据 5 个 column sm-7 则意味着 B 将会在 sm 屏幕下 占据 7 个 column 这样一来 在 sm 屏幕下
A 和 B 就会左右排列了 由于我们没有再设置 md 和 lg 的类 所以在 md 和 lg 屏幕下
Bootstrap 将会沿用我们对 sm 屏幕的设置 事实上对于 Bootstrap 的某些属性
如果没有显式设置大屏幕下的表现的话 Bootstrap 会自动把你对小屏幕的设置
应用到那些大屏幕上 在这个栗子里我对 A 设置了 col-sm-5
但没有设置 col-md 和 col-lg 那么 Bootstrap 就会根据我的 col-sm-5
帮我设置好 col-md-5 和 col-lg-5 意味着只要在不小于 sm 的屏幕下
A 都会占据 5 个 column 对 B 也是同理的 这是 Bootstrap 的内置功能 能让你免于重复做某些相同的设置 Bootstrap 还提供了一个系列的类 叫 pull 和 push 应用 pull 和 push 类的话 你就能把网页中的一些内容
"拉回来"或"推出去"了 那么这里有一个栗子
你可以看到 A 和 B 两块内容 在 xs 屏幕下仍然是上下排列的 A 在上 B 在下 不过在 sm 或更大的屏幕下 你可以看到 与之前不同的是
虽然它们仍是左右排列 但 B 跑到左边而 A 跑到右边了
这是因为应用了 push 和 pull 你可以看到对于 A 而言
我为其额外设置了 col-sm-push-7 意味着 A 将会被"推出去" 7 列 也就是意味着 A 将会
占据这个 row 的后 5 个 column 对于 B 我除了 col-sm-7 以外
还设置了 col-sm-pull-5 意味着 B 将会被"拉回来" 5 列
也就是占据这个 row 的前 7 个 column 所以有了 push 和 pull 之后 你就能更灵活地定制网页的样式了 Bootstrap 还有一个很好的类 叫 offset 它允许你"空出"一定的 column 出来 在这个栗子里 我对一块内容 设置了 col-sm-offset-1 这意味着在 sm 或更大的屏幕下
这块内容将会在其前面 "空出" 1 个 column 出来 也就是从第 2 个 column 开始排版
而不是从第 1 个 如果你不设置 offset 的话 Bootstrap 会默认你从
第 1 个 column 开始排版 在这个栗子里如果你在后面
跟一个 col-sm-7 的话 那么 col-sm-7 将会占据剩余的 7 个 column 接下来我们要看的是"嵌套"的使用 也就是说 我们完全可以在 row 里面
再用一个 row 如图所示 我就在右边的 col-sm-7 里面 插入了一个 row
然后在这个 row 里面 我又能类似地加进一些内容 对这些内容我能通过
一些 col 的类来定制它们 那么对这个栗子 让我来叙述一下
它的层次结构 首先是一个 container, 然后是一个 row
在这个 row 里面 我插入了两块内容 它们分别设置了
col-sm-5 和 sol-sm-7 然后在 col-sm-7 里面
我插入了另一个 row 对于这个 row, Bootstrap 同样会 在里面给我安排 12 个 column 这 12 个 column 是在原先的
7 个 column 的空间中进行等分的 然后你就可以 利用这 12 个等分的 column
来类似地对你网页中的内容 进行恰当的排版了 这种嵌套的行为将能让你以 更灵活的方式来在不同的屏幕大小下
对网页的各种不同内容进行排版 以上 我们学习了如何利用
Bootstrap 的网格系统 在不同的屏幕大小下 对网页的各种内容
进行灵活的排版 所以接下来我们将会
进行一个练习 在这个练习里 我们会 利用 Bootstrap 的网格系统 来修改我们的网页 从而使其能更好地
展示我们网页的内容 特别的 我们还将学习如何
通过我们自己写的 CSS 代码 来定制我们的网页
【翻译 - Carefree0910】